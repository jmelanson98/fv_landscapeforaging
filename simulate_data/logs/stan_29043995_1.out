
TRANSLATING MODEL '' FROM Stan CODE TO C++ CODE NOW.
OS: x86_64, linux-gnu; rstan: 2.32.7; Rcpp: 1.0.14; inline: 0.3.21 
 >> setting environment variables: 
PKG_LIBS =  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb 
PKG_CPPFLAGS =   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1 
 >> Program source :

   1 : 
   2 : // includes from the plugin
   3 : // [[Rcpp::plugins(cpp14)]]
   4 : 
   5 : 
   6 : // user includes
   7 : #include <Rcpp.h>
   8 : using namespace Rcpp;
   9 : #ifndef MODELS_HPP
  10 : #define MODELS_HPP
  11 : #define STAN__SERVICES__COMMAND_HPP
  12 : #include <rstan/rstaninc.hpp>
  13 : #ifndef USE_STANC3
  14 : #define USE_STANC3
  15 : #endif
  16 : // Code generated by stanc v2.32.2
  17 : #include <stan/model/model_header.hpp>
  18 : namespace model3d9223794422__namespace {
  19 : using stan::model::model_base_crtp;
  20 : using namespace stan::math;
  21 : stan::math::profile_map profiles__;
  22 : static constexpr std::array<const char*, 78> locations_array__ =
  23 :   {" (found before start of program)",
  24 :   " (in 'anon_model', line 17, column 0 to column 18)",
  25 :   " (in 'anon_model', line 18, column 0 to column 20)",
  26 :   " (in 'anon_model', line 19, column 0 to column 18)",
  27 :   " (in 'anon_model', line 20, column 0 to column 11)",
  28 :   " (in 'anon_model', line 21, column 0 to column 8)",
  29 :   " (in 'anon_model', line 22, column 0 to column 14)",
  30 :   " (in 'anon_model', line 23, column 0 to column 15)",
  31 :   " (in 'anon_model', line 24, column 0 to column 62)",
  32 :   " (in 'anon_model', line 27, column 2 to column 37)",
  33 :   " (in 'anon_model', line 28, column 2 to column 41)",
  34 :   " (in 'anon_model', line 29, column 2 to column 41)",
  35 :   " (in 'anon_model', line 30, column 2 to column 39)",
  36 :   " (in 'anon_model', line 58, column 2 to column 24)",
  37 :   " (in 'anon_model', line 59, column 2 to column 33)",
  38 :   " (in 'anon_model', line 63, column 11 to column 12)",
  39 :   " (in 'anon_model', line 63, column 13 to column 14)",
  40 :   " (in 'anon_model', line 63, column 4 to column 20)",
  41 :   " (in 'anon_model', line 64, column 11 to column 12)",
  42 :   " (in 'anon_model', line 64, column 13 to column 14)",
  43 :   " (in 'anon_model', line 64, column 4 to column 23)",
  44 :   " (in 'anon_model', line 65, column 11 to column 12)",
  45 :   " (in 'anon_model', line 65, column 4 to column 16)",
  46 :   " (in 'anon_model', line 66, column 4 to column 23)",
  47 :   " (in 'anon_model', line 71, column 8 to column 92)",
  48 :   " (in 'anon_model', line 72, column 8 to column 104)",
  49 :   " (in 'anon_model', line 70, column 19 to line 73, column 7)",
  50 :   " (in 'anon_model', line 70, column 6 to line 73, column 7)",
  51 :   " (in 'anon_model', line 69, column 17 to line 74, column 5)",
  52 :   " (in 'anon_model', line 69, column 4 to line 74, column 5)",
  53 :   " (in 'anon_model', line 78, column 6 to column 34)",
  54 :   " (in 'anon_model', line 77, column 18 to line 79, column 5)",
  55 :   " (in 'anon_model', line 77, column 4 to line 79, column 5)",
  56 :   " (in 'anon_model', line 84, column 6 to column 78)",
  57 :   " (in 'anon_model', line 83, column 18 to line 85, column 5)",
  58 :   " (in 'anon_model', line 83, column 4 to line 85, column 5)",
  59 :   " (in 'anon_model', line 62, column 2 to line 86, column 3)",
  60 :   " (in 'anon_model', line 37, column 7 to column 8)",
  61 :   " (in 'anon_model', line 37, column 9 to column 10)",
  62 :   " (in 'anon_model', line 37, column 0 to column 16)",
  63 :   " (in 'anon_model', line 38, column 7 to column 8)",
  64 :   " (in 'anon_model', line 38, column 9 to column 10)",
  65 :   " (in 'anon_model', line 38, column 0 to column 19)",
  66 :   " (in 'anon_model', line 40, column 0 to column 27)",
  67 :   " (in 'anon_model', line 41, column 0 to column 25)",
  68 :   " (in 'anon_model', line 42, column 0 to column 36)",
  69 :   " (in 'anon_model', line 43, column 0 to column 24)",
  70 :   " (in 'anon_model', line 44, column 0 to column 27)",
  71 :   " (in 'anon_model', line 46, column 0 to column 19)",
  72 :   " (in 'anon_model', line 47, column 0 to column 20)",
  73 :   " (in 'anon_model', line 51, column 4 to column 88)",
  74 :   " (in 'anon_model', line 52, column 4 to column 100)",
  75 :   " (in 'anon_model', line 53, column 4 to column 40)",
  76 :   " (in 'anon_model', line 50, column 15 to line 54, column 3)",
  77 :   " (in 'anon_model', line 50, column 2 to line 54, column 3)",
  78 :   " (in 'anon_model', line 49, column 13 to line 55, column 1)",
  79 :   " (in 'anon_model', line 49, column 0 to line 55, column 1)",
  80 :   " (in 'anon_model', line 4, column 0 to column 15)",
  81 :   " (in 'anon_model', line 5, column 0 to column 15)",
  82 :   " (in 'anon_model', line 6, column 7 to column 8)",
  83 :   " (in 'anon_model', line 6, column 0 to column 18)",
  84 :   " (in 'anon_model', line 7, column 6 to column 7)",
  85 :   " (in 'anon_model', line 7, column 9 to column 10)",
  86 :   " (in 'anon_model', line 7, column 0 to column 12)",
  87 :   " (in 'anon_model', line 8, column 0 to column 16)",
  88 :   " (in 'anon_model', line 9, column 0 to column 16)",
  89 :   " (in 'anon_model', line 10, column 7 to column 8)",
  90 :   " (in 'anon_model', line 10, column 0 to column 17)",
  91 :   " (in 'anon_model', line 11, column 0 to column 22)",
  92 :   " (in 'anon_model', line 12, column 0 to column 22)",
  93 :   " (in 'anon_model', line 13, column 0 to column 25)",
  94 :   " (in 'anon_model', line 14, column 0 to column 21)",
  95 :   " (in 'anon_model', line 22, column 7 to column 8)",
  96 :   " (in 'anon_model', line 23, column 7 to column 8)",
  97 :   " (in 'anon_model', line 24, column 7 to column 8)",
  98 :   " (in 'anon_model', line 29, column 9 to column 10)",
  99 :   " (in 'anon_model', line 30, column 9 to column 10)",
 100 :   " (in 'anon_model', line 58, column 9 to column 10)"};
 101 : class model3d9223794422_ final : public model_base_crtp<model3d9223794422_> {
 102 : private:
 103 :   int C;
 104 :   int K;
 105 :   Eigen::Matrix<double,-1,-1> trap_data__;
 106 :   std::vector<std::vector<int>> y;
 107 :   double lowerbound;
 108 :   double upperbound;
 109 :   Eigen::Matrix<double,-1,1> floral_data__;
 110 :   double priorVa;
 111 :   double priorCo;
 112 :   double rho_center;
 113 :   double rho_sd;
 114 :   Eigen::Map<Eigen::Matrix<double,-1,-1>> trap{nullptr, 0, 0};
 115 :   Eigen::Map<Eigen::Matrix<double,-1,1>> floral{nullptr, 0};
 116 : public:
 117 :   ~model3d9223794422_() {}
 118 :   model3d9223794422_(stan::io::var_context& context__, unsigned int
 119 :                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
 120 :       : model_base_crtp(0) {
 121 :     int current_statement__ = 0;
 122 :     using local_scalar_t__ = double;
 123 :     boost::ecuyer1988 base_rng__ =
 124 :       stan::services::util::create_rng(random_seed__, 0);
 125 :     // suppress unused var warning
 126 :     (void) base_rng__;
 127 :     static constexpr const char* function__ =
 128 :       "model3d9223794422__namespace::model3d9223794422_";
 129 :     // suppress unused var warning
 130 :     (void) function__;
 131 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 132 :     // suppress unused var warning
 133 :     (void) DUMMY_VAR__;
 134 :     try {
 135 :       int pos__ = std::numeric_limits<int>::min();
 136 :       pos__ = 1;
 137 :       current_statement__ = 57;
 138 :       context__.validate_dims("data initialization", "C", "int",
 139 :         std::vector<size_t>{});
 140 :       C = std::numeric_limits<int>::min();
 141 :       current_statement__ = 57;
 142 :       C = context__.vals_i("C")[(1 - 1)];
 143 :       current_statement__ = 57;
 144 :       stan::math::check_greater_or_equal(function__, "C", C, 1);
 145 :       current_statement__ = 58;
 146 :       context__.validate_dims("data initialization", "K", "int",
 147 :         std::vector<size_t>{});
 148 :       K = std::numeric_limits<int>::min();
 149 :       current_statement__ = 58;
 150 :       K = context__.vals_i("K")[(1 - 1)];
 151 :       current_statement__ = 58;
 152 :       stan::math::check_greater_or_equal(function__, "K", K, 1);
 153 :       current_statement__ = 59;
 154 :       stan::math::validate_non_negative_index("trap", "K", K);
 155 :       current_statement__ = 60;
 156 :       context__.validate_dims("data initialization", "trap", "double",
 157 :         std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(2)});
 158 :       trap_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, 2,
 159 :                       std::numeric_limits<double>::quiet_NaN());
 160 :       new (&trap) Eigen::Map<Eigen::Matrix<double,-1,-1>>(trap_data__.data(),
 161 :         K, 2);
 162 :       {
 163 :         std::vector<local_scalar_t__> trap_flat__;
 164 :         current_statement__ = 60;
 165 :         trap_flat__ = context__.vals_r("trap");
 166 :         current_statement__ = 60;
 167 :         pos__ = 1;
 168 :         current_statement__ = 60;
 169 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 170 :           current_statement__ = 60;
 171 :           for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
 172 :             current_statement__ = 60;
 173 :             stan::model::assign(trap, trap_flat__[(pos__ - 1)],
 174 :               "assigning variable trap", stan::model::index_uni(sym2__),
 175 :               stan::model::index_uni(sym1__));
 176 :             current_statement__ = 60;
 177 :             pos__ = (pos__ + 1);
 178 :           }
 179 :         }
 180 :       }
 181 :       current_statement__ = 61;
 182 :       stan::math::validate_non_negative_index("y", "C", C);
 183 :       current_statement__ = 62;
 184 :       stan::math::validate_non_negative_index("y", "K", K);
 185 :       current_statement__ = 63;
 186 :       context__.validate_dims("data initialization", "y", "int",
 187 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(K)});
 188 :       y = std::vector<std::vector<int>>(C,
 189 :             std::vector<int>(K, std::numeric_limits<int>::min()));
 190 :       {
 191 :         std::vector<int> y_flat__;
 192 :         current_statement__ = 63;
 193 :         y_flat__ = context__.vals_i("y");
 194 :         current_statement__ = 63;
 195 :         pos__ = 1;
 196 :         current_statement__ = 63;
 197 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 198 :           current_statement__ = 63;
 199 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 200 :             current_statement__ = 63;
 201 :             stan::model::assign(y, y_flat__[(pos__ - 1)],
 202 :               "assigning variable y", stan::model::index_uni(sym2__),
 203 :               stan::model::index_uni(sym1__));
 204 :             current_statement__ = 63;
 205 :             pos__ = (pos__ + 1);
 206 :           }
 207 :         }
 208 :       }
 209 :       current_statement__ = 64;
 210 :       context__.validate_dims("data initialization", "lowerbound", "double",
 211 :         std::vector<size_t>{});
 212 :       lowerbound = std::numeric_limits<double>::quiet_NaN();
 213 :       current_statement__ = 64;
 214 :       lowerbound = context__.vals_r("lowerbound")[(1 - 1)];
 215 :       current_statement__ = 65;
 216 :       context__.validate_dims("data initialization", "upperbound", "double",
 217 :         std::vector<size_t>{});
 218 :       upperbound = std::numeric_limits<double>::quiet_NaN();
 219 :       current_statement__ = 65;
 220 :       upperbound = context__.vals_r("upperbound")[(1 - 1)];
 221 :       current_statement__ = 66;
 222 :       stan::math::validate_non_negative_index("floral", "K", K);
 223 :       current_statement__ = 67;
 224 :       context__.validate_dims("data initialization", "floral", "double",
 225 :         std::vector<size_t>{static_cast<size_t>(K)});
 226 :       floral_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
 227 :                         std::numeric_limits<double>::quiet_NaN());
 228 :       new (&floral)
 229 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(floral_data__.data(), K);
 230 :       {
 231 :         std::vector<local_scalar_t__> floral_flat__;
 232 :         current_statement__ = 67;
 233 :         floral_flat__ = context__.vals_r("floral");
 234 :         current_statement__ = 67;
 235 :         pos__ = 1;
 236 :         current_statement__ = 67;
 237 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 238 :           current_statement__ = 67;
 239 :           stan::model::assign(floral, floral_flat__[(pos__ - 1)],
 240 :             "assigning variable floral", stan::model::index_uni(sym1__));
 241 :           current_statement__ = 67;
 242 :           pos__ = (pos__ + 1);
 243 :         }
 244 :       }
 245 :       current_statement__ = 68;
 246 :       context__.validate_dims("data initialization", "priorVa", "double",
 247 :         std::vector<size_t>{});
 248 :       priorVa = std::numeric_limits<double>::quiet_NaN();
 249 :       current_statement__ = 68;
 250 :       priorVa = context__.vals_r("priorVa")[(1 - 1)];
 251 :       current_statement__ = 68;
 252 :       stan::math::check_greater_or_equal(function__, "priorVa", priorVa, 0);
 253 :       current_statement__ = 69;
 254 :       context__.validate_dims("data initialization", "priorCo", "double",
 255 :         std::vector<size_t>{});
 256 :       priorCo = std::numeric_limits<double>::quiet_NaN();
 257 :       current_statement__ = 69;
 258 :       priorCo = context__.vals_r("priorCo")[(1 - 1)];
 259 :       current_statement__ = 69;
 260 :       stan::math::check_greater_or_equal(function__, "priorCo", priorCo, 0);
 261 :       current_statement__ = 70;
 262 :       context__.validate_dims("data initialization", "rho_center", "double",
 263 :         std::vector<size_t>{});
 264 :       rho_center = std::numeric_limits<double>::quiet_NaN();
 265 :       current_statement__ = 70;
 266 :       rho_center = context__.vals_r("rho_center")[(1 - 1)];
 267 :       current_statement__ = 70;
 268 :       stan::math::check_greater_or_equal(function__, "rho_center",
 269 :         rho_center, 0);
 270 :       current_statement__ = 71;
 271 :       context__.validate_dims("data initialization", "rho_sd", "double",
 272 :         std::vector<size_t>{});
 273 :       rho_sd = std::numeric_limits<double>::quiet_NaN();
 274 :       current_statement__ = 71;
 275 :       rho_sd = context__.vals_r("rho_sd")[(1 - 1)];
 276 :       current_statement__ = 71;
 277 :       stan::math::check_greater_or_equal(function__, "rho_sd", rho_sd, 0);
 278 :       current_statement__ = 72;
 279 :       stan::math::validate_non_negative_index("eps", "K", K);
 280 :       current_statement__ = 73;
 281 :       stan::math::validate_non_negative_index("zeta", "C", C);
 282 :       current_statement__ = 74;
 283 :       stan::math::validate_non_negative_index("delta", "C", C);
 284 :       current_statement__ = 75;
 285 :       stan::math::validate_non_negative_index("zeta_scale", "C", C);
 286 :       current_statement__ = 76;
 287 :       stan::math::validate_non_negative_index("eps_scale", "K", K);
 288 :       current_statement__ = 77;
 289 :       stan::math::validate_non_negative_index("colony_dist", "C", C);
 290 :     } catch (const std::exception& e) {
 291 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 292 :     }
 293 :     num_params_r__ = 1 + 1 + 1 + 1 + 1 + K + C + (C * 2);
 294 :   }
 295 :   inline std::string model_name() const final {
 296 :     return "model3d9223794422_";
 297 :   }
 298 :   inline std::vector<std::string> model_compile_info() const noexcept {
 299 :     return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
 300 :              "stancflags = --"};
 301 :   }
 302 :   template <bool propto__, bool jacobian__, typename VecR, typename VecI,
 303 :             stan::require_vector_like_t<VecR>* = nullptr,
 304 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 305 :   inline stan::scalar_type_t<VecR>
 306 :   log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
 307 :                 pstream__ = nullptr) const {
 308 :     using T__ = stan::scalar_type_t<VecR>;
 309 :     using local_scalar_t__ = T__;
 310 :     T__ lp__(0.0);
 311 :     stan::math::accumulator<T__> lp_accum__;
 312 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 313 :     int current_statement__ = 0;
 314 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 315 :     // suppress unused var warning
 316 :     (void) DUMMY_VAR__;
 317 :     static constexpr const char* function__ =
 318 :       "model3d9223794422__namespace::log_prob";
 319 :     // suppress unused var warning
 320 :     (void) function__;
 321 :     try {
 322 :       local_scalar_t__ rho = DUMMY_VAR__;
 323 :       current_statement__ = 1;
 324 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 325 :               lp__);
 326 :       local_scalar_t__ sigma = DUMMY_VAR__;
 327 :       current_statement__ = 2;
 328 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 329 :                 jacobian__>(0, lp__);
 330 :       local_scalar_t__ tau = DUMMY_VAR__;
 331 :       current_statement__ = 3;
 332 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 333 :               lp__);
 334 :       local_scalar_t__ theta = DUMMY_VAR__;
 335 :       current_statement__ = 4;
 336 :       theta = in__.template read<local_scalar_t__>();
 337 :       local_scalar_t__ mu = DUMMY_VAR__;
 338 :       current_statement__ = 5;
 339 :       mu = in__.template read<local_scalar_t__>();
 340 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 341 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 342 :       current_statement__ = 6;
 343 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 344 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 345 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 346 :       current_statement__ = 7;
 347 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 348 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 349 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 350 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 351 :       current_statement__ = 8;
 352 :       delta = in__.template read_constrain_lub<
 353 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 354 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 355 :       local_scalar_t__ tau_sqrt = DUMMY_VAR__;
 356 :       current_statement__ = 9;
 357 :       tau_sqrt = stan::math::sqrt(tau);
 358 :       local_scalar_t__ sigma_sqrt = DUMMY_VAR__;
 359 :       current_statement__ = 10;
 360 :       sigma_sqrt = stan::math::sqrt(sigma);
 361 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta_scale =
 362 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 363 :       current_statement__ = 11;
 364 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 365 :         "assigning variable zeta_scale");
 366 :       Eigen::Matrix<local_scalar_t__,-1,1> eps_scale =
 367 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 368 :       current_statement__ = 12;
 369 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 370 :         "assigning variable eps_scale");
 371 :       current_statement__ = 9;
 372 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 373 :       current_statement__ = 10;
 374 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 375 :         sigma_sqrt, 0);
 376 :       {
 377 :         current_statement__ = 37;
 378 :         stan::math::validate_non_negative_index("dis", "C", C);
 379 :         current_statement__ = 38;
 380 :         stan::math::validate_non_negative_index("dis", "K", K);
 381 :         Eigen::Matrix<local_scalar_t__,-1,-1> dis =
 382 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 383 :         current_statement__ = 40;
 384 :         stan::math::validate_non_negative_index("lambda", "C", C);
 385 :         current_statement__ = 41;
 386 :         stan::math::validate_non_negative_index("lambda", "K", K);
 387 :         Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
 388 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 389 :         current_statement__ = 43;
 390 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, priorVa));
 391 :         current_statement__ = 44;
 392 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(tau, 0, priorVa));
 393 :         current_statement__ = 45;
 394 :         lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, rho_center,
 395 :                          rho_sd));
 396 :         current_statement__ = 46;
 397 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, priorCo));
 398 :         current_statement__ = 47;
 399 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, priorCo));
 400 :         current_statement__ = 48;
 401 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(eps, 0, 1));
 402 :         current_statement__ = 49;
 403 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta, 0, 1));
 404 :         current_statement__ = 56;
 405 :         for (int k = 1; k <= K; ++k) {
 406 :           current_statement__ = 54;
 407 :           for (int i = 1; i <= C; ++i) {
 408 :             current_statement__ = 50;
 409 :             stan::model::assign(dis,
 410 :               stan::math::sqrt(
 411 :                 (stan::math::square(
 412 :                    (stan::model::rvalue(delta, "delta",
 413 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 414 :                    stan::model::rvalue(trap, "trap",
 415 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 416 :                 +
 417 :                 stan::math::square(
 418 :                   (stan::model::rvalue(delta, "delta",
 419 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 420 :                   stan::model::rvalue(trap, "trap",
 421 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 422 :               "assigning variable dis", stan::model::index_uni(i),
 423 :               stan::model::index_uni(k));
 424 :             current_statement__ = 51;
 425 :             stan::model::assign(lambda, ((((-0.5 *
 426 :               stan::math::pow(
 427 :                 (stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 428 :                    stan::model::index_uni(k)) / (rho *
 429 :                 stan::math::exp((theta *
 430 :                   stan::model::rvalue(floral, "floral",
 431 :                     stan::model::index_uni(k)))))), 2)) + mu) +
 432 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 433 :                 stan::model::index_uni(i))) +
 434 :               stan::model::rvalue(eps_scale, "eps_scale",
 435 :                 stan::model::index_uni(k))), "assigning variable lambda",
 436 :               stan::model::index_uni(i), stan::model::index_uni(k));
 437 :             current_statement__ = 52;
 438 :             lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
 439 :                              stan::model::rvalue(y, "y",
 440 :                                stan::model::index_uni(i),
 441 :                                stan::model::index_uni(k)),
 442 :                              stan::model::rvalue(lambda, "lambda",
 443 :                                stan::model::index_uni(i),
 444 :                                stan::model::index_uni(k))));
 445 :           }
 446 :         }
 447 :       }
 448 :     } catch (const std::exception& e) {
 449 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 450 :     }
 451 :     lp_accum__.add(lp__);
 452 :     return lp_accum__.sum();
 453 :   }
 454 :   template <typename RNG, typename VecR, typename VecI, typename VecVar,
 455 :             stan::require_vector_like_vt<std::is_floating_point,
 456 :             VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
 457 :             VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
 458 :             VecVar>* = nullptr>
 459 :   inline void
 460 :   write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
 461 :                    VecVar& vars__, const bool
 462 :                    emit_transformed_parameters__ = true, const bool
 463 :                    emit_generated_quantities__ = true, std::ostream*
 464 :                    pstream__ = nullptr) const {
 465 :     using local_scalar_t__ = double;
 466 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 467 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 468 :     static constexpr bool propto__ = true;
 469 :     // suppress unused var warning
 470 :     (void) propto__;
 471 :     double lp__ = 0.0;
 472 :     // suppress unused var warning
 473 :     (void) lp__;
 474 :     int current_statement__ = 0;
 475 :     stan::math::accumulator<double> lp_accum__;
 476 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 477 :     // suppress unused var warning
 478 :     (void) DUMMY_VAR__;
 479 :     constexpr bool jacobian__ = false;
 480 :     static constexpr const char* function__ =
 481 :       "model3d9223794422__namespace::write_array";
 482 :     // suppress unused var warning
 483 :     (void) function__;
 484 :     try {
 485 :       double rho = std::numeric_limits<double>::quiet_NaN();
 486 :       current_statement__ = 1;
 487 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 488 :               lp__);
 489 :       double sigma = std::numeric_limits<double>::quiet_NaN();
 490 :       current_statement__ = 2;
 491 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 492 :                 jacobian__>(0, lp__);
 493 :       double tau = std::numeric_limits<double>::quiet_NaN();
 494 :       current_statement__ = 3;
 495 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 496 :               lp__);
 497 :       double theta = std::numeric_limits<double>::quiet_NaN();
 498 :       current_statement__ = 4;
 499 :       theta = in__.template read<local_scalar_t__>();
 500 :       double mu = std::numeric_limits<double>::quiet_NaN();
 501 :       current_statement__ = 5;
 502 :       mu = in__.template read<local_scalar_t__>();
 503 :       Eigen::Matrix<double,-1,1> eps =
 504 :         Eigen::Matrix<double,-1,1>::Constant(K,
 505 :           std::numeric_limits<double>::quiet_NaN());
 506 :       current_statement__ = 6;
 507 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 508 :       Eigen::Matrix<double,-1,1> zeta =
 509 :         Eigen::Matrix<double,-1,1>::Constant(C,
 510 :           std::numeric_limits<double>::quiet_NaN());
 511 :       current_statement__ = 7;
 512 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 513 :       std::vector<Eigen::Matrix<double,-1,1>> delta =
 514 :         std::vector<Eigen::Matrix<double,-1,1>>(C,
 515 :           Eigen::Matrix<double,-1,1>::Constant(2,
 516 :             std::numeric_limits<double>::quiet_NaN()));
 517 :       current_statement__ = 8;
 518 :       delta = in__.template read_constrain_lub<
 519 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 520 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 521 :       double tau_sqrt = std::numeric_limits<double>::quiet_NaN();
 522 :       double sigma_sqrt = std::numeric_limits<double>::quiet_NaN();
 523 :       Eigen::Matrix<double,-1,1> zeta_scale =
 524 :         Eigen::Matrix<double,-1,1>::Constant(C,
 525 :           std::numeric_limits<double>::quiet_NaN());
 526 :       Eigen::Matrix<double,-1,1> eps_scale =
 527 :         Eigen::Matrix<double,-1,1>::Constant(K,
 528 :           std::numeric_limits<double>::quiet_NaN());
 529 :       out__.write(rho);
 530 :       out__.write(sigma);
 531 :       out__.write(tau);
 532 :       out__.write(theta);
 533 :       out__.write(mu);
 534 :       out__.write(eps);
 535 :       out__.write(zeta);
 536 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 537 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 538 :           out__.write(delta[(sym2__ - 1)][(sym1__ - 1)]);
 539 :         }
 540 :       }
 541 :       if (stan::math::logical_negation(
 542 :             (stan::math::primitive_value(emit_transformed_parameters__) ||
 543 :             stan::math::primitive_value(emit_generated_quantities__)))) {
 544 :         return ;
 545 :       }
 546 :       current_statement__ = 9;
 547 :       tau_sqrt = stan::math::sqrt(tau);
 548 :       current_statement__ = 10;
 549 :       sigma_sqrt = stan::math::sqrt(sigma);
 550 :       current_statement__ = 11;
 551 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 552 :         "assigning variable zeta_scale");
 553 :       current_statement__ = 12;
 554 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 555 :         "assigning variable eps_scale");
 556 :       current_statement__ = 9;
 557 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 558 :       current_statement__ = 10;
 559 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 560 :         sigma_sqrt, 0);
 561 :       if (emit_transformed_parameters__) {
 562 :         out__.write(tau_sqrt);
 563 :         out__.write(sigma_sqrt);
 564 :         out__.write(zeta_scale);
 565 :         out__.write(eps_scale);
 566 :       }
 567 :       if (stan::math::logical_negation(emit_generated_quantities__)) {
 568 :         return ;
 569 :       }
 570 :       Eigen::Matrix<double,-1,1> colony_dist =
 571 :         Eigen::Matrix<double,-1,1>::Constant(C,
 572 :           std::numeric_limits<double>::quiet_NaN());
 573 :       current_statement__ = 14;
 574 :       stan::model::assign(colony_dist, stan::math::rep_vector(0, C),
 575 :         "assigning variable colony_dist");
 576 :       {
 577 :         current_statement__ = 15;
 578 :         stan::math::validate_non_negative_index("dis", "C", C);
 579 :         current_statement__ = 16;
 580 :         stan::math::validate_non_negative_index("dis", "K", K);
 581 :         Eigen::Matrix<double,-1,-1> dis =
 582 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 583 :             std::numeric_limits<double>::quiet_NaN());
 584 :         current_statement__ = 18;
 585 :         stan::math::validate_non_negative_index("lambda", "C", C);
 586 :         current_statement__ = 19;
 587 :         stan::math::validate_non_negative_index("lambda", "K", K);
 588 :         Eigen::Matrix<double,-1,-1> lambda =
 589 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 590 :             std::numeric_limits<double>::quiet_NaN());
 591 :         current_statement__ = 21;
 592 :         stan::math::validate_non_negative_index("V", "C", C);
 593 :         Eigen::Matrix<double,-1,1> V =
 594 :           Eigen::Matrix<double,-1,1>::Constant(C,
 595 :             std::numeric_limits<double>::quiet_NaN());
 596 :         double alpha = std::numeric_limits<double>::quiet_NaN();
 597 :         current_statement__ = 23;
 598 :         alpha = 1e-12;
 599 :         current_statement__ = 29;
 600 :         for (int k = 1; k <= K; ++k) {
 601 :           current_statement__ = 27;
 602 :           for (int i = 1; i <= C; ++i) {
 603 :             current_statement__ = 24;
 604 :             stan::model::assign(dis,
 605 :               stan::math::sqrt(
 606 :                 (stan::math::square(
 607 :                    (stan::model::rvalue(delta, "delta",
 608 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 609 :                    stan::model::rvalue(trap, "trap",
 610 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 611 :                 +
 612 :                 stan::math::square(
 613 :                   (stan::model::rvalue(delta, "delta",
 614 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 615 :                   stan::model::rvalue(trap, "trap",
 616 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 617 :               "assigning variable dis", stan::model::index_uni(i),
 618 :               stan::model::index_uni(k));
 619 :             current_statement__ = 25;
 620 :             stan::model::assign(lambda, ((((-0.5 *
 621 :               stan::math::pow(
 622 :                 (stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 623 :                    stan::model::index_uni(k)) / (rho *
 624 :                 stan::math::exp((theta *
 625 :                   stan::model::rvalue(floral, "floral",
 626 :                     stan::model::index_uni(k)))))), 2)) + mu) +
 627 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 628 :                 stan::model::index_uni(i))) +
 629 :               stan::model::rvalue(eps_scale, "eps_scale",
 630 :                 stan::model::index_uni(k))), "assigning variable lambda",
 631 :               stan::model::index_uni(i), stan::model::index_uni(k));
 632 :           }
 633 :         }
 634 :         current_statement__ = 32;
 635 :         for (int i = 1; i <= C; ++i) {
 636 :           current_statement__ = 30;
 637 :           stan::model::assign(V,
 638 :             stan::math::sum(
 639 :               stan::math::exp(
 640 :                 stan::model::rvalue(lambda, "lambda",
 641 :                   stan::model::index_uni(i), stan::model::index_omni()))),
 642 :             "assigning variable V", stan::model::index_uni(i));
 643 :         }
 644 :         current_statement__ = 35;
 645 :         for (int k = 1; k <= K; ++k) {
 646 :           current_statement__ = 33;
 647 :           stan::model::assign(colony_dist,
 648 :             stan::math::add(stan::model::deep_copy(colony_dist),
 649 :               stan::math::elt_divide(
 650 :                 stan::math::elt_multiply(
 651 :                   stan::model::rvalue(dis, "dis", stan::model::index_omni(),
 652 :                     stan::model::index_uni(k)),
 653 :                   stan::math::exp(
 654 :                     stan::model::rvalue(lambda, "lambda",
 655 :                       stan::model::index_omni(), stan::model::index_uni(k)))),
 656 :                 stan::math::add(V, alpha))), "assigning variable colony_dist");
 657 :         }
 658 :       }
 659 :       out__.write(colony_dist);
 660 :     } catch (const std::exception& e) {
 661 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 662 :     }
 663 :   }
 664 :   template <typename VecVar, typename VecI,
 665 :             stan::require_vector_t<VecVar>* = nullptr,
 666 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 667 :   inline void
 668 :   unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
 669 :                          VecVar& vars__, std::ostream* pstream__ = nullptr) const {
 670 :     using local_scalar_t__ = double;
 671 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 672 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 673 :     int current_statement__ = 0;
 674 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 675 :     // suppress unused var warning
 676 :     (void) DUMMY_VAR__;
 677 :     try {
 678 :       int pos__ = std::numeric_limits<int>::min();
 679 :       pos__ = 1;
 680 :       local_scalar_t__ rho = DUMMY_VAR__;
 681 :       current_statement__ = 1;
 682 :       rho = in__.read<local_scalar_t__>();
 683 :       out__.write_free_lb(0, rho);
 684 :       local_scalar_t__ sigma = DUMMY_VAR__;
 685 :       current_statement__ = 2;
 686 :       sigma = in__.read<local_scalar_t__>();
 687 :       out__.write_free_lb(0, sigma);
 688 :       local_scalar_t__ tau = DUMMY_VAR__;
 689 :       current_statement__ = 3;
 690 :       tau = in__.read<local_scalar_t__>();
 691 :       out__.write_free_lb(0, tau);
 692 :       local_scalar_t__ theta = DUMMY_VAR__;
 693 :       current_statement__ = 4;
 694 :       theta = in__.read<local_scalar_t__>();
 695 :       out__.write(theta);
 696 :       local_scalar_t__ mu = DUMMY_VAR__;
 697 :       current_statement__ = 5;
 698 :       mu = in__.read<local_scalar_t__>();
 699 :       out__.write(mu);
 700 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 701 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 702 :       current_statement__ = 6;
 703 :       stan::model::assign(eps,
 704 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
 705 :         "assigning variable eps");
 706 :       out__.write(eps);
 707 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 708 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 709 :       current_statement__ = 7;
 710 :       stan::model::assign(zeta,
 711 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(C),
 712 :         "assigning variable zeta");
 713 :       out__.write(zeta);
 714 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 715 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 716 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 717 :       current_statement__ = 8;
 718 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 719 :         current_statement__ = 8;
 720 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 721 :           current_statement__ = 8;
 722 :           stan::model::assign(delta, in__.read<local_scalar_t__>(),
 723 :             "assigning variable delta", stan::model::index_uni(sym2__),
 724 :             stan::model::index_uni(sym1__));
 725 :         }
 726 :       }
 727 :       out__.write_free_lub(lowerbound, upperbound, delta);
 728 :     } catch (const std::exception& e) {
 729 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 730 :     }
 731 :   }
 732 :   template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
 733 :   inline void
 734 :   transform_inits_impl(const stan::io::var_context& context__, VecVar&
 735 :                        vars__, std::ostream* pstream__ = nullptr) const {
 736 :     using local_scalar_t__ = double;
 737 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 738 :     int current_statement__ = 0;
 739 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 740 :     // suppress unused var warning
 741 :     (void) DUMMY_VAR__;
 742 :     try {
 743 :       current_statement__ = 1;
 744 :       context__.validate_dims("parameter initialization", "rho", "double",
 745 :         std::vector<size_t>{});
 746 :       current_statement__ = 2;
 747 :       context__.validate_dims("parameter initialization", "sigma", "double",
 748 :         std::vector<size_t>{});
 749 :       current_statement__ = 3;
 750 :       context__.validate_dims("parameter initialization", "tau", "double",
 751 :         std::vector<size_t>{});
 752 :       current_statement__ = 4;
 753 :       context__.validate_dims("parameter initialization", "theta", "double",
 754 :         std::vector<size_t>{});
 755 :       current_statement__ = 5;
 756 :       context__.validate_dims("parameter initialization", "mu", "double",
 757 :         std::vector<size_t>{});
 758 :       current_statement__ = 6;
 759 :       context__.validate_dims("parameter initialization", "eps", "double",
 760 :         std::vector<size_t>{static_cast<size_t>(K)});
 761 :       current_statement__ = 7;
 762 :       context__.validate_dims("parameter initialization", "zeta", "double",
 763 :         std::vector<size_t>{static_cast<size_t>(C)});
 764 :       current_statement__ = 8;
 765 :       context__.validate_dims("parameter initialization", "delta", "double",
 766 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(2)});
 767 :       int pos__ = std::numeric_limits<int>::min();
 768 :       pos__ = 1;
 769 :       local_scalar_t__ rho = DUMMY_VAR__;
 770 :       current_statement__ = 1;
 771 :       rho = context__.vals_r("rho")[(1 - 1)];
 772 :       out__.write_free_lb(0, rho);
 773 :       local_scalar_t__ sigma = DUMMY_VAR__;
 774 :       current_statement__ = 2;
 775 :       sigma = context__.vals_r("sigma")[(1 - 1)];
 776 :       out__.write_free_lb(0, sigma);
 777 :       local_scalar_t__ tau = DUMMY_VAR__;
 778 :       current_statement__ = 3;
 779 :       tau = context__.vals_r("tau")[(1 - 1)];
 780 :       out__.write_free_lb(0, tau);
 781 :       local_scalar_t__ theta = DUMMY_VAR__;
 782 :       current_statement__ = 4;
 783 :       theta = context__.vals_r("theta")[(1 - 1)];
 784 :       out__.write(theta);
 785 :       local_scalar_t__ mu = DUMMY_VAR__;
 786 :       current_statement__ = 5;
 787 :       mu = context__.vals_r("mu")[(1 - 1)];
 788 :       out__.write(mu);
 789 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 790 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 791 :       {
 792 :         std::vector<local_scalar_t__> eps_flat__;
 793 :         current_statement__ = 6;
 794 :         eps_flat__ = context__.vals_r("eps");
 795 :         current_statement__ = 6;
 796 :         pos__ = 1;
 797 :         current_statement__ = 6;
 798 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 799 :           current_statement__ = 6;
 800 :           stan::model::assign(eps, eps_flat__[(pos__ - 1)],
 801 :             "assigning variable eps", stan::model::index_uni(sym1__));
 802 :           current_statement__ = 6;
 803 :           pos__ = (pos__ + 1);
 804 :         }
 805 :       }
 806 :       out__.write(eps);
 807 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 808 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 809 :       {
 810 :         std::vector<local_scalar_t__> zeta_flat__;
 811 :         current_statement__ = 7;
 812 :         zeta_flat__ = context__.vals_r("zeta");
 813 :         current_statement__ = 7;
 814 :         pos__ = 1;
 815 :         current_statement__ = 7;
 816 :         for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 817 :           current_statement__ = 7;
 818 :           stan::model::assign(zeta, zeta_flat__[(pos__ - 1)],
 819 :             "assigning variable zeta", stan::model::index_uni(sym1__));
 820 :           current_statement__ = 7;
 821 :           pos__ = (pos__ + 1);
 822 :         }
 823 :       }
 824 :       out__.write(zeta);
 825 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 826 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 827 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 828 :       {
 829 :         std::vector<local_scalar_t__> delta_flat__;
 830 :         current_statement__ = 8;
 831 :         delta_flat__ = context__.vals_r("delta");
 832 :         current_statement__ = 8;
 833 :         pos__ = 1;
 834 :         current_statement__ = 8;
 835 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 836 :           current_statement__ = 8;
 837 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 838 :             current_statement__ = 8;
 839 :             stan::model::assign(delta, delta_flat__[(pos__ - 1)],
 840 :               "assigning variable delta", stan::model::index_uni(sym2__),
 841 :               stan::model::index_uni(sym1__));
 842 :             current_statement__ = 8;
 843 :             pos__ = (pos__ + 1);
 844 :           }
 845 :         }
 846 :       }
 847 :       out__.write_free_lub(lowerbound, upperbound, delta);
 848 :     } catch (const std::exception& e) {
 849 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 850 :     }
 851 :   }
 852 :   inline void
 853 :   get_param_names(std::vector<std::string>& names__, const bool
 854 :                   emit_transformed_parameters__ = true, const bool
 855 :                   emit_generated_quantities__ = true) const {
 856 :     names__ = std::vector<std::string>{"rho", "sigma", "tau", "theta", "mu",
 857 :                 "eps", "zeta", "delta"};
 858 :     if (emit_transformed_parameters__) {
 859 :       std::vector<std::string>
 860 :         temp{"tau_sqrt", "sigma_sqrt", "zeta_scale", "eps_scale"};
 861 :       names__.reserve(names__.size() + temp.size());
 862 :       names__.insert(names__.end(), temp.begin(), temp.end());
 863 :     }
 864 :     if (emit_generated_quantities__) {
 865 :       std::vector<std::string> temp{"colony_dist"};
 866 :       names__.reserve(names__.size() + temp.size());
 867 :       names__.insert(names__.end(), temp.begin(), temp.end());
 868 :     }
 869 :   }
 870 :   inline void
 871 :   get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
 872 :            emit_transformed_parameters__ = true, const bool
 873 :            emit_generated_quantities__ = true) const {
 874 :     dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
 875 :                 std::vector<size_t>{}, std::vector<size_t>{},
 876 :                 std::vector<size_t>{}, std::vector<size_t>{},
 877 :                 std::vector<size_t>{static_cast<size_t>(K)},
 878 :                 std::vector<size_t>{static_cast<size_t>(C)},
 879 :                 std::vector<size_t>{static_cast<size_t>(C),
 880 :                   static_cast<size_t>(2)}};
 881 :     if (emit_transformed_parameters__) {
 882 :       std::vector<std::vector<size_t>>
 883 :         temp{std::vector<size_t>{}, std::vector<size_t>{},
 884 :              std::vector<size_t>{static_cast<size_t>(C)},
 885 :              std::vector<size_t>{static_cast<size_t>(K)}};
 886 :       dimss__.reserve(dimss__.size() + temp.size());
 887 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 888 :     }
 889 :     if (emit_generated_quantities__) {
 890 :       std::vector<std::vector<size_t>>
 891 :         temp{std::vector<size_t>{static_cast<size_t>(C)}};
 892 :       dimss__.reserve(dimss__.size() + temp.size());
 893 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 894 :     }
 895 :   }
 896 :   inline void
 897 :   constrained_param_names(std::vector<std::string>& param_names__, bool
 898 :                           emit_transformed_parameters__ = true, bool
 899 :                           emit_generated_quantities__ = true) const final {
 900 :     param_names__.emplace_back(std::string() + "rho");
 901 :     param_names__.emplace_back(std::string() + "sigma");
 902 :     param_names__.emplace_back(std::string() + "tau");
 903 :     param_names__.emplace_back(std::string() + "theta");
 904 :     param_names__.emplace_back(std::string() + "mu");
 905 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 906 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 907 :         std::to_string(sym1__));
 908 :     }
 909 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 910 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 911 :         std::to_string(sym1__));
 912 :     }
 913 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 914 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 915 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 916 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 917 :       }
 918 :     }
 919 :     if (emit_transformed_parameters__) {
 920 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 921 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 922 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 923 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 924 :           std::to_string(sym1__));
 925 :       }
 926 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 927 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 928 :           std::to_string(sym1__));
 929 :       }
 930 :     }
 931 :     if (emit_generated_quantities__) {
 932 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 933 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
 934 :           std::to_string(sym1__));
 935 :       }
 936 :     }
 937 :   }
 938 :   inline void
 939 :   unconstrained_param_names(std::vector<std::string>& param_names__, bool
 940 :                             emit_transformed_parameters__ = true, bool
 941 :                             emit_generated_quantities__ = true) const final {
 942 :     param_names__.emplace_back(std::string() + "rho");
 943 :     param_names__.emplace_back(std::string() + "sigma");
 944 :     param_names__.emplace_back(std::string() + "tau");
 945 :     param_names__.emplace_back(std::string() + "theta");
 946 :     param_names__.emplace_back(std::string() + "mu");
 947 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 948 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 949 :         std::to_string(sym1__));
 950 :     }
 951 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 952 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 953 :         std::to_string(sym1__));
 954 :     }
 955 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 956 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 957 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 958 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 959 :       }
 960 :     }
 961 :     if (emit_transformed_parameters__) {
 962 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 963 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 964 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 965 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 966 :           std::to_string(sym1__));
 967 :       }
 968 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 969 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 970 :           std::to_string(sym1__));
 971 :       }
 972 :     }
 973 :     if (emit_generated_quantities__) {
 974 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 975 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
 976 :           std::to_string(sym1__));
 977 :       }
 978 :     }
 979 :   }
 980 :   inline std::string get_constrained_sizedtypes() const {
 981 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
 982 :   }
 983 :   inline std::string get_unconstrained_sizedtypes() const {
 984 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
 985 :   }
 986 :   // Begin method overload boilerplate
 987 :   template <typename RNG> inline void
 988 :   write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
 989 :               Eigen::Matrix<double,-1,1>& vars, const bool
 990 :               emit_transformed_parameters = true, const bool
 991 :               emit_generated_quantities = true, std::ostream*
 992 :               pstream = nullptr) const {
 993 :     const size_t num_params__ = (((((((1 + 1) + 1) + 1) + 1) + K) + C) + (C *
 994 :       2));
 995 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
 996 :       C) + K));
 997 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
 998 :     const size_t num_to_write = num_params__ + num_transformed +
 999 :       num_gen_quantities;
1000 :     std::vector<int> params_i;
1001 :     vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
1002 :              std::numeric_limits<double>::quiet_NaN());
1003 :     write_array_impl(base_rng, params_r, params_i, vars,
1004 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1005 :   }
1006 :   template <typename RNG> inline void
1007 :   write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
1008 :               params_i, std::vector<double>& vars, bool
1009 :               emit_transformed_parameters = true, bool
1010 :               emit_generated_quantities = true, std::ostream*
1011 :               pstream = nullptr) const {
1012 :     const size_t num_params__ = (((((((1 + 1) + 1) + 1) + 1) + K) + C) + (C *
1013 :       2));
1014 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1015 :       C) + K));
1016 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1017 :     const size_t num_to_write = num_params__ + num_transformed +
1018 :       num_gen_quantities;
1019 :     vars = std::vector<double>(num_to_write,
1020 :              std::numeric_limits<double>::quiet_NaN());
1021 :     write_array_impl(base_rng, params_r, params_i, vars,
1022 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1023 :   }
1024 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1025 :   log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
1026 :     Eigen::Matrix<int,-1,1> params_i;
1027 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1028 :   }
1029 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1030 :   log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
1031 :            std::ostream* pstream = nullptr) const {
1032 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1033 :   }
1034 :   inline void
1035 :   transform_inits(const stan::io::var_context& context,
1036 :                   Eigen::Matrix<double,-1,1>& params_r, std::ostream*
1037 :                   pstream = nullptr) const final {
1038 :     std::vector<double> params_r_vec(params_r.size());
1039 :     std::vector<int> params_i;
1040 :     transform_inits(context, params_i, params_r_vec, pstream);
1041 :     params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
1042 :                  params_r_vec.size());
1043 :   }
1044 :   inline void
1045 :   transform_inits(const stan::io::var_context& context, std::vector<int>&
1046 :                   params_i, std::vector<double>& vars, std::ostream*
1047 :                   pstream__ = nullptr) const {
1048 :     vars.resize(num_params_r__);
1049 :     transform_inits_impl(context, vars, pstream__);
1050 :   }
1051 :   inline void
1052 :   unconstrain_array(const std::vector<double>& params_constrained,
1053 :                     std::vector<double>& params_unconstrained, std::ostream*
1054 :                     pstream = nullptr) const {
1055 :     const std::vector<int> params_i;
1056 :     params_unconstrained = std::vector<double>(num_params_r__,
1057 :                              std::numeric_limits<double>::quiet_NaN());
1058 :     unconstrain_array_impl(params_constrained, params_i,
1059 :       params_unconstrained, pstream);
1060 :   }
1061 :   inline void
1062 :   unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
1063 :                     Eigen::Matrix<double,-1,1>& params_unconstrained,
1064 :                     std::ostream* pstream = nullptr) const {
1065 :     const std::vector<int> params_i;
1066 :     params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
1067 :                              std::numeric_limits<double>::quiet_NaN());
1068 :     unconstrain_array_impl(params_constrained, params_i,
1069 :       params_unconstrained, pstream);
1070 :   }
1071 : };
1072 : }
1073 : using stan_model = model3d9223794422__namespace::model3d9223794422_;
1074 : #ifndef USING_R
1075 : // Boilerplate
1076 : stan::model::model_base&
1077 : new_model(stan::io::var_context& data_context, unsigned int seed,
1078 :           std::ostream* msg_stream) {
1079 :   stan_model* m = new stan_model(data_context, seed, msg_stream);
1080 :   return *m;
1081 : }
1082 : stan::math::profile_map& get_stan_profile_data() {
1083 :   return model3d9223794422__namespace::profiles__;
1084 : }
1085 : #endif
1086 : #endif
1087 : 
1088 : RCPP_MODULE(stan_fit4model3d9223794422__mod) {
1089 :   class_<rstan::stan_fit<stan_model, boost::random::ecuyer1988> >(
1090 :       "stan_fit4model3d9223794422_")
1091 : 
1092 :       .constructor<SEXP, SEXP, SEXP>()
1093 : 
1094 :       .method(
1095 :           "call_sampler",
1096 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::call_sampler)
1097 :       .method(
1098 :           "param_names",
1099 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_names)
1100 :       .method("param_names_oi",
1101 :               &rstan::stan_fit<stan_model,
1102 :                                boost::random::ecuyer1988>::param_names_oi)
1103 :       .method("param_fnames_oi",
1104 :               &rstan::stan_fit<stan_model,
1105 :                                boost::random::ecuyer1988>::param_fnames_oi)
1106 :       .method(
1107 :           "param_dims",
1108 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_dims)
1109 :       .method("param_dims_oi",
1110 :               &rstan::stan_fit<stan_model,
1111 :                                boost::random::ecuyer1988>::param_dims_oi)
1112 :       .method("update_param_oi",
1113 :               &rstan::stan_fit<stan_model,
1114 :                                boost::random::ecuyer1988>::update_param_oi)
1115 :       .method("param_oi_tidx",
1116 :               &rstan::stan_fit<stan_model,
1117 :                                boost::random::ecuyer1988>::param_oi_tidx)
1118 :       .method("grad_log_prob",
1119 :               &rstan::stan_fit<stan_model,
1120 :                                boost::random::ecuyer1988>::grad_log_prob)
1121 :       .method("log_prob",
1122 :               &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::log_prob)
1123 :       .method("unconstrain_pars",
1124 :               &rstan::stan_fit<stan_model,
1125 :                                boost::random::ecuyer1988>::unconstrain_pars)
1126 :       .method("constrain_pars",
1127 :               &rstan::stan_fit<stan_model,
1128 :                                boost::random::ecuyer1988>::constrain_pars)
1129 :       .method(
1130 :           "num_pars_unconstrained",
1131 :           &rstan::stan_fit<stan_model,
1132 :                            boost::random::ecuyer1988>::num_pars_unconstrained)
1133 :       .method(
1134 :           "unconstrained_param_names",
1135 :           &rstan::stan_fit<
1136 :               stan_model, boost::random::ecuyer1988>::unconstrained_param_names)
1137 :       .method(
1138 :           "constrained_param_names",
1139 :           &rstan::stan_fit<stan_model,
1140 :                            boost::random::ecuyer1988>::constrained_param_names)
1141 :       .method("standalone_gqs",
1142 :               &rstan::stan_fit<stan_model,
1143 :                                boost::random::ecuyer1988>::standalone_gqs);
1144 : }
1145 : 
1146 : 
1147 : // declarations
1148 : extern "C" {
1149 : SEXP file3d922571d90c7( ) ;
1150 : }
1151 : 
1152 : // definition
1153 : SEXP file3d922571d90c7() {
1154 :  return Rcpp::wrap("anon_model");
1155 : }
make cmd is
  make -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/etc/Makeconf' -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/share/make/shlib.mk' CXX='$(CXX17) $(CXX17STD)' CXXFLAGS='$(CXX17FLAGS)' CXXPICFLAGS='$(CXX17PICFLAGS)' SHLIB_LDFLAGS='$(SHLIB_CXX17LDFLAGS)' SHLIB_LD='$(SHLIB_CXX17LD)' SHLIB='file3d922571d90c7.so' OBJECTS='file3d922571d90c7.o'

make would use
g++ -std=gnu++17 -I"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/include" -DNDEBUG   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/java/17.0.6/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include/flexiblas    -fpic  -O2 -ftree-vectorize -march=x86-64-v3 -fno-math-errno  -c file3d922571d90c7.cpp -o file3d922571d90c7.o
if test  "zfile3d922571d90c7.o" != "z"; then \
  echo g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file3d922571d90c7.so file3d922571d90c7.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
  g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file3d922571d90c7.so file3d922571d90c7.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
fi

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 3: 
Chain 3: Gradient evaluation took 0.361079 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 3610.79 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 1: 
Chain 1: Gradient evaluation took 0.333435 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3334.35 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.337571 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3375.71 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 4: 
Chain 4: Gradient evaluation took 0.3404 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 3404 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 3: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
