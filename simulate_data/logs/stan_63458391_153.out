
TRANSLATING MODEL '' FROM Stan CODE TO C++ CODE NOW.
OS: x86_64, linux-gnu; rstan: 2.32.7; Rcpp: 1.0.14; inline: 0.3.21 
 >> setting environment variables: 
PKG_LIBS =  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb 
PKG_CPPFLAGS =   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1 
 >> Program source :

   1 : 
   2 : // includes from the plugin
   3 : // [[Rcpp::plugins(cpp14)]]
   4 : 
   5 : 
   6 : // user includes
   7 : #include <Rcpp.h>
   8 : using namespace Rcpp;
   9 : #ifndef MODELS_HPP
  10 : #define MODELS_HPP
  11 : #define STAN__SERVICES__COMMAND_HPP
  12 : #include <rstan/rstaninc.hpp>
  13 : #ifndef USE_STANC3
  14 : #define USE_STANC3
  15 : #endif
  16 : // Code generated by stanc v2.32.2
  17 : #include <stan/model/model_header.hpp>
  18 : namespace model182999187f68ac__namespace {
  19 : using stan::model::model_base_crtp;
  20 : using namespace stan::math;
  21 : stan::math::profile_map profiles__;
  22 : static constexpr std::array<const char*, 78> locations_array__ =
  23 :   {" (found before start of program)",
  24 :   " (in 'anon_model', line 17, column 0 to column 18)",
  25 :   " (in 'anon_model', line 18, column 0 to column 20)",
  26 :   " (in 'anon_model', line 19, column 0 to column 18)",
  27 :   " (in 'anon_model', line 20, column 0 to column 11)",
  28 :   " (in 'anon_model', line 21, column 0 to column 8)",
  29 :   " (in 'anon_model', line 22, column 0 to column 14)",
  30 :   " (in 'anon_model', line 23, column 0 to column 15)",
  31 :   " (in 'anon_model', line 24, column 0 to column 62)",
  32 :   " (in 'anon_model', line 27, column 2 to column 37)",
  33 :   " (in 'anon_model', line 28, column 2 to column 41)",
  34 :   " (in 'anon_model', line 29, column 2 to column 41)",
  35 :   " (in 'anon_model', line 30, column 2 to column 39)",
  36 :   " (in 'anon_model', line 58, column 2 to column 24)",
  37 :   " (in 'anon_model', line 59, column 2 to column 33)",
  38 :   " (in 'anon_model', line 63, column 11 to column 12)",
  39 :   " (in 'anon_model', line 63, column 13 to column 14)",
  40 :   " (in 'anon_model', line 63, column 4 to column 20)",
  41 :   " (in 'anon_model', line 64, column 11 to column 12)",
  42 :   " (in 'anon_model', line 64, column 13 to column 14)",
  43 :   " (in 'anon_model', line 64, column 4 to column 23)",
  44 :   " (in 'anon_model', line 65, column 11 to column 12)",
  45 :   " (in 'anon_model', line 65, column 4 to column 16)",
  46 :   " (in 'anon_model', line 66, column 4 to column 23)",
  47 :   " (in 'anon_model', line 71, column 8 to column 92)",
  48 :   " (in 'anon_model', line 72, column 8 to column 95)",
  49 :   " (in 'anon_model', line 70, column 19 to line 73, column 7)",
  50 :   " (in 'anon_model', line 70, column 6 to line 73, column 7)",
  51 :   " (in 'anon_model', line 69, column 17 to line 74, column 5)",
  52 :   " (in 'anon_model', line 69, column 4 to line 74, column 5)",
  53 :   " (in 'anon_model', line 78, column 6 to column 34)",
  54 :   " (in 'anon_model', line 77, column 18 to line 79, column 5)",
  55 :   " (in 'anon_model', line 77, column 4 to line 79, column 5)",
  56 :   " (in 'anon_model', line 84, column 6 to column 78)",
  57 :   " (in 'anon_model', line 83, column 18 to line 85, column 5)",
  58 :   " (in 'anon_model', line 83, column 4 to line 85, column 5)",
  59 :   " (in 'anon_model', line 62, column 2 to line 86, column 3)",
  60 :   " (in 'anon_model', line 37, column 7 to column 8)",
  61 :   " (in 'anon_model', line 37, column 9 to column 10)",
  62 :   " (in 'anon_model', line 37, column 0 to column 16)",
  63 :   " (in 'anon_model', line 38, column 7 to column 8)",
  64 :   " (in 'anon_model', line 38, column 9 to column 10)",
  65 :   " (in 'anon_model', line 38, column 0 to column 19)",
  66 :   " (in 'anon_model', line 40, column 0 to column 27)",
  67 :   " (in 'anon_model', line 41, column 0 to column 25)",
  68 :   " (in 'anon_model', line 42, column 0 to column 36)",
  69 :   " (in 'anon_model', line 43, column 0 to column 24)",
  70 :   " (in 'anon_model', line 44, column 0 to column 27)",
  71 :   " (in 'anon_model', line 46, column 0 to column 19)",
  72 :   " (in 'anon_model', line 47, column 0 to column 20)",
  73 :   " (in 'anon_model', line 51, column 4 to column 88)",
  74 :   " (in 'anon_model', line 52, column 4 to column 92)",
  75 :   " (in 'anon_model', line 53, column 4 to column 40)",
  76 :   " (in 'anon_model', line 50, column 15 to line 54, column 3)",
  77 :   " (in 'anon_model', line 50, column 2 to line 54, column 3)",
  78 :   " (in 'anon_model', line 49, column 13 to line 55, column 1)",
  79 :   " (in 'anon_model', line 49, column 0 to line 55, column 1)",
  80 :   " (in 'anon_model', line 4, column 0 to column 15)",
  81 :   " (in 'anon_model', line 5, column 0 to column 15)",
  82 :   " (in 'anon_model', line 6, column 7 to column 8)",
  83 :   " (in 'anon_model', line 6, column 0 to column 18)",
  84 :   " (in 'anon_model', line 7, column 6 to column 7)",
  85 :   " (in 'anon_model', line 7, column 9 to column 10)",
  86 :   " (in 'anon_model', line 7, column 0 to column 12)",
  87 :   " (in 'anon_model', line 8, column 0 to column 16)",
  88 :   " (in 'anon_model', line 9, column 0 to column 16)",
  89 :   " (in 'anon_model', line 10, column 7 to column 8)",
  90 :   " (in 'anon_model', line 10, column 0 to column 17)",
  91 :   " (in 'anon_model', line 11, column 0 to column 22)",
  92 :   " (in 'anon_model', line 12, column 0 to column 22)",
  93 :   " (in 'anon_model', line 13, column 0 to column 25)",
  94 :   " (in 'anon_model', line 14, column 0 to column 21)",
  95 :   " (in 'anon_model', line 22, column 7 to column 8)",
  96 :   " (in 'anon_model', line 23, column 7 to column 8)",
  97 :   " (in 'anon_model', line 24, column 7 to column 8)",
  98 :   " (in 'anon_model', line 29, column 9 to column 10)",
  99 :   " (in 'anon_model', line 30, column 9 to column 10)",
 100 :   " (in 'anon_model', line 58, column 9 to column 10)"};
 101 : class model182999187f68ac_ final : public model_base_crtp<model182999187f68ac_> {
 102 : private:
 103 :   int C;
 104 :   int K;
 105 :   Eigen::Matrix<double,-1,-1> trap_data__;
 106 :   std::vector<std::vector<int>> y;
 107 :   double lowerbound;
 108 :   double upperbound;
 109 :   Eigen::Matrix<double,-1,1> floral_data__;
 110 :   double priorVa;
 111 :   double priorCo;
 112 :   double rho_center;
 113 :   double rho_sd;
 114 :   Eigen::Map<Eigen::Matrix<double,-1,-1>> trap{nullptr, 0, 0};
 115 :   Eigen::Map<Eigen::Matrix<double,-1,1>> floral{nullptr, 0};
 116 : public:
 117 :   ~model182999187f68ac_() {}
 118 :   model182999187f68ac_(stan::io::var_context& context__, unsigned int
 119 :                        random_seed__ = 0, std::ostream* pstream__ = nullptr)
 120 :       : model_base_crtp(0) {
 121 :     int current_statement__ = 0;
 122 :     using local_scalar_t__ = double;
 123 :     boost::ecuyer1988 base_rng__ =
 124 :       stan::services::util::create_rng(random_seed__, 0);
 125 :     // suppress unused var warning
 126 :     (void) base_rng__;
 127 :     static constexpr const char* function__ =
 128 :       "model182999187f68ac__namespace::model182999187f68ac_";
 129 :     // suppress unused var warning
 130 :     (void) function__;
 131 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 132 :     // suppress unused var warning
 133 :     (void) DUMMY_VAR__;
 134 :     try {
 135 :       int pos__ = std::numeric_limits<int>::min();
 136 :       pos__ = 1;
 137 :       current_statement__ = 57;
 138 :       context__.validate_dims("data initialization", "C", "int",
 139 :         std::vector<size_t>{});
 140 :       C = std::numeric_limits<int>::min();
 141 :       current_statement__ = 57;
 142 :       C = context__.vals_i("C")[(1 - 1)];
 143 :       current_statement__ = 57;
 144 :       stan::math::check_greater_or_equal(function__, "C", C, 1);
 145 :       current_statement__ = 58;
 146 :       context__.validate_dims("data initialization", "K", "int",
 147 :         std::vector<size_t>{});
 148 :       K = std::numeric_limits<int>::min();
 149 :       current_statement__ = 58;
 150 :       K = context__.vals_i("K")[(1 - 1)];
 151 :       current_statement__ = 58;
 152 :       stan::math::check_greater_or_equal(function__, "K", K, 1);
 153 :       current_statement__ = 59;
 154 :       stan::math::validate_non_negative_index("trap", "K", K);
 155 :       current_statement__ = 60;
 156 :       context__.validate_dims("data initialization", "trap", "double",
 157 :         std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(2)});
 158 :       trap_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, 2,
 159 :                       std::numeric_limits<double>::quiet_NaN());
 160 :       new (&trap) Eigen::Map<Eigen::Matrix<double,-1,-1>>(trap_data__.data(),
 161 :         K, 2);
 162 :       {
 163 :         std::vector<local_scalar_t__> trap_flat__;
 164 :         current_statement__ = 60;
 165 :         trap_flat__ = context__.vals_r("trap");
 166 :         current_statement__ = 60;
 167 :         pos__ = 1;
 168 :         current_statement__ = 60;
 169 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 170 :           current_statement__ = 60;
 171 :           for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
 172 :             current_statement__ = 60;
 173 :             stan::model::assign(trap, trap_flat__[(pos__ - 1)],
 174 :               "assigning variable trap", stan::model::index_uni(sym2__),
 175 :               stan::model::index_uni(sym1__));
 176 :             current_statement__ = 60;
 177 :             pos__ = (pos__ + 1);
 178 :           }
 179 :         }
 180 :       }
 181 :       current_statement__ = 61;
 182 :       stan::math::validate_non_negative_index("y", "C", C);
 183 :       current_statement__ = 62;
 184 :       stan::math::validate_non_negative_index("y", "K", K);
 185 :       current_statement__ = 63;
 186 :       context__.validate_dims("data initialization", "y", "int",
 187 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(K)});
 188 :       y = std::vector<std::vector<int>>(C,
 189 :             std::vector<int>(K, std::numeric_limits<int>::min()));
 190 :       {
 191 :         std::vector<int> y_flat__;
 192 :         current_statement__ = 63;
 193 :         y_flat__ = context__.vals_i("y");
 194 :         current_statement__ = 63;
 195 :         pos__ = 1;
 196 :         current_statement__ = 63;
 197 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 198 :           current_statement__ = 63;
 199 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 200 :             current_statement__ = 63;
 201 :             stan::model::assign(y, y_flat__[(pos__ - 1)],
 202 :               "assigning variable y", stan::model::index_uni(sym2__),
 203 :               stan::model::index_uni(sym1__));
 204 :             current_statement__ = 63;
 205 :             pos__ = (pos__ + 1);
 206 :           }
 207 :         }
 208 :       }
 209 :       current_statement__ = 64;
 210 :       context__.validate_dims("data initialization", "lowerbound", "double",
 211 :         std::vector<size_t>{});
 212 :       lowerbound = std::numeric_limits<double>::quiet_NaN();
 213 :       current_statement__ = 64;
 214 :       lowerbound = context__.vals_r("lowerbound")[(1 - 1)];
 215 :       current_statement__ = 65;
 216 :       context__.validate_dims("data initialization", "upperbound", "double",
 217 :         std::vector<size_t>{});
 218 :       upperbound = std::numeric_limits<double>::quiet_NaN();
 219 :       current_statement__ = 65;
 220 :       upperbound = context__.vals_r("upperbound")[(1 - 1)];
 221 :       current_statement__ = 66;
 222 :       stan::math::validate_non_negative_index("floral", "K", K);
 223 :       current_statement__ = 67;
 224 :       context__.validate_dims("data initialization", "floral", "double",
 225 :         std::vector<size_t>{static_cast<size_t>(K)});
 226 :       floral_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
 227 :                         std::numeric_limits<double>::quiet_NaN());
 228 :       new (&floral)
 229 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(floral_data__.data(), K);
 230 :       {
 231 :         std::vector<local_scalar_t__> floral_flat__;
 232 :         current_statement__ = 67;
 233 :         floral_flat__ = context__.vals_r("floral");
 234 :         current_statement__ = 67;
 235 :         pos__ = 1;
 236 :         current_statement__ = 67;
 237 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 238 :           current_statement__ = 67;
 239 :           stan::model::assign(floral, floral_flat__[(pos__ - 1)],
 240 :             "assigning variable floral", stan::model::index_uni(sym1__));
 241 :           current_statement__ = 67;
 242 :           pos__ = (pos__ + 1);
 243 :         }
 244 :       }
 245 :       current_statement__ = 68;
 246 :       context__.validate_dims("data initialization", "priorVa", "double",
 247 :         std::vector<size_t>{});
 248 :       priorVa = std::numeric_limits<double>::quiet_NaN();
 249 :       current_statement__ = 68;
 250 :       priorVa = context__.vals_r("priorVa")[(1 - 1)];
 251 :       current_statement__ = 68;
 252 :       stan::math::check_greater_or_equal(function__, "priorVa", priorVa, 0);
 253 :       current_statement__ = 69;
 254 :       context__.validate_dims("data initialization", "priorCo", "double",
 255 :         std::vector<size_t>{});
 256 :       priorCo = std::numeric_limits<double>::quiet_NaN();
 257 :       current_statement__ = 69;
 258 :       priorCo = context__.vals_r("priorCo")[(1 - 1)];
 259 :       current_statement__ = 69;
 260 :       stan::math::check_greater_or_equal(function__, "priorCo", priorCo, 0);
 261 :       current_statement__ = 70;
 262 :       context__.validate_dims("data initialization", "rho_center", "double",
 263 :         std::vector<size_t>{});
 264 :       rho_center = std::numeric_limits<double>::quiet_NaN();
 265 :       current_statement__ = 70;
 266 :       rho_center = context__.vals_r("rho_center")[(1 - 1)];
 267 :       current_statement__ = 70;
 268 :       stan::math::check_greater_or_equal(function__, "rho_center",
 269 :         rho_center, 0);
 270 :       current_statement__ = 71;
 271 :       context__.validate_dims("data initialization", "rho_sd", "double",
 272 :         std::vector<size_t>{});
 273 :       rho_sd = std::numeric_limits<double>::quiet_NaN();
 274 :       current_statement__ = 71;
 275 :       rho_sd = context__.vals_r("rho_sd")[(1 - 1)];
 276 :       current_statement__ = 71;
 277 :       stan::math::check_greater_or_equal(function__, "rho_sd", rho_sd, 0);
 278 :       current_statement__ = 72;
 279 :       stan::math::validate_non_negative_index("eps", "K", K);
 280 :       current_statement__ = 73;
 281 :       stan::math::validate_non_negative_index("zeta", "C", C);
 282 :       current_statement__ = 74;
 283 :       stan::math::validate_non_negative_index("delta", "C", C);
 284 :       current_statement__ = 75;
 285 :       stan::math::validate_non_negative_index("zeta_scale", "C", C);
 286 :       current_statement__ = 76;
 287 :       stan::math::validate_non_negative_index("eps_scale", "K", K);
 288 :       current_statement__ = 77;
 289 :       stan::math::validate_non_negative_index("colony_dist", "C", C);
 290 :     } catch (const std::exception& e) {
 291 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 292 :     }
 293 :     num_params_r__ = 1 + 1 + 1 + 1 + 1 + K + C + (C * 2);
 294 :   }
 295 :   inline std::string model_name() const final {
 296 :     return "model182999187f68ac_";
 297 :   }
 298 :   inline std::vector<std::string> model_compile_info() const noexcept {
 299 :     return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
 300 :              "stancflags = --"};
 301 :   }
 302 :   template <bool propto__, bool jacobian__, typename VecR, typename VecI,
 303 :             stan::require_vector_like_t<VecR>* = nullptr,
 304 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 305 :   inline stan::scalar_type_t<VecR>
 306 :   log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
 307 :                 pstream__ = nullptr) const {
 308 :     using T__ = stan::scalar_type_t<VecR>;
 309 :     using local_scalar_t__ = T__;
 310 :     T__ lp__(0.0);
 311 :     stan::math::accumulator<T__> lp_accum__;
 312 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 313 :     int current_statement__ = 0;
 314 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 315 :     // suppress unused var warning
 316 :     (void) DUMMY_VAR__;
 317 :     static constexpr const char* function__ =
 318 :       "model182999187f68ac__namespace::log_prob";
 319 :     // suppress unused var warning
 320 :     (void) function__;
 321 :     try {
 322 :       local_scalar_t__ rho = DUMMY_VAR__;
 323 :       current_statement__ = 1;
 324 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 325 :               lp__);
 326 :       local_scalar_t__ sigma = DUMMY_VAR__;
 327 :       current_statement__ = 2;
 328 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 329 :                 jacobian__>(0, lp__);
 330 :       local_scalar_t__ tau = DUMMY_VAR__;
 331 :       current_statement__ = 3;
 332 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 333 :               lp__);
 334 :       local_scalar_t__ theta = DUMMY_VAR__;
 335 :       current_statement__ = 4;
 336 :       theta = in__.template read<local_scalar_t__>();
 337 :       local_scalar_t__ mu = DUMMY_VAR__;
 338 :       current_statement__ = 5;
 339 :       mu = in__.template read<local_scalar_t__>();
 340 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 341 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 342 :       current_statement__ = 6;
 343 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 344 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 345 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 346 :       current_statement__ = 7;
 347 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 348 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 349 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 350 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 351 :       current_statement__ = 8;
 352 :       delta = in__.template read_constrain_lub<
 353 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 354 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 355 :       local_scalar_t__ tau_sqrt = DUMMY_VAR__;
 356 :       current_statement__ = 9;
 357 :       tau_sqrt = stan::math::sqrt(tau);
 358 :       local_scalar_t__ sigma_sqrt = DUMMY_VAR__;
 359 :       current_statement__ = 10;
 360 :       sigma_sqrt = stan::math::sqrt(sigma);
 361 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta_scale =
 362 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 363 :       current_statement__ = 11;
 364 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 365 :         "assigning variable zeta_scale");
 366 :       Eigen::Matrix<local_scalar_t__,-1,1> eps_scale =
 367 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 368 :       current_statement__ = 12;
 369 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 370 :         "assigning variable eps_scale");
 371 :       current_statement__ = 9;
 372 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 373 :       current_statement__ = 10;
 374 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 375 :         sigma_sqrt, 0);
 376 :       {
 377 :         current_statement__ = 37;
 378 :         stan::math::validate_non_negative_index("dis", "C", C);
 379 :         current_statement__ = 38;
 380 :         stan::math::validate_non_negative_index("dis", "K", K);
 381 :         Eigen::Matrix<local_scalar_t__,-1,-1> dis =
 382 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 383 :         current_statement__ = 40;
 384 :         stan::math::validate_non_negative_index("lambda", "C", C);
 385 :         current_statement__ = 41;
 386 :         stan::math::validate_non_negative_index("lambda", "K", K);
 387 :         Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
 388 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 389 :         current_statement__ = 43;
 390 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, priorVa));
 391 :         current_statement__ = 44;
 392 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(tau, 0, priorVa));
 393 :         current_statement__ = 45;
 394 :         lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, rho_center,
 395 :                          rho_sd));
 396 :         current_statement__ = 46;
 397 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, priorCo));
 398 :         current_statement__ = 47;
 399 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, priorCo));
 400 :         current_statement__ = 48;
 401 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(eps, 0, 1));
 402 :         current_statement__ = 49;
 403 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta, 0, 1));
 404 :         current_statement__ = 56;
 405 :         for (int k = 1; k <= K; ++k) {
 406 :           current_statement__ = 54;
 407 :           for (int i = 1; i <= C; ++i) {
 408 :             current_statement__ = 50;
 409 :             stan::model::assign(dis,
 410 :               stan::math::sqrt(
 411 :                 (stan::math::square(
 412 :                    (stan::model::rvalue(delta, "delta",
 413 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 414 :                    stan::model::rvalue(trap, "trap",
 415 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 416 :                 +
 417 :                 stan::math::square(
 418 :                   (stan::model::rvalue(delta, "delta",
 419 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 420 :                   stan::model::rvalue(trap, "trap",
 421 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 422 :               "assigning variable dis", stan::model::index_uni(i),
 423 :               stan::model::index_uni(k));
 424 :             current_statement__ = 51;
 425 :             stan::model::assign(lambda,
 426 :               ((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 427 :                     stan::model::index_uni(k)) / (-rho *
 428 :               stan::math::exp((theta *
 429 :                 stan::model::rvalue(floral, "floral",
 430 :                   stan::model::index_uni(k)))))) + mu) +
 431 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 432 :                 stan::model::index_uni(i))) +
 433 :               stan::model::rvalue(eps_scale, "eps_scale",
 434 :                 stan::model::index_uni(k))), "assigning variable lambda",
 435 :               stan::model::index_uni(i), stan::model::index_uni(k));
 436 :             current_statement__ = 52;
 437 :             lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
 438 :                              stan::model::rvalue(y, "y",
 439 :                                stan::model::index_uni(i),
 440 :                                stan::model::index_uni(k)),
 441 :                              stan::model::rvalue(lambda, "lambda",
 442 :                                stan::model::index_uni(i),
 443 :                                stan::model::index_uni(k))));
 444 :           }
 445 :         }
 446 :       }
 447 :     } catch (const std::exception& e) {
 448 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 449 :     }
 450 :     lp_accum__.add(lp__);
 451 :     return lp_accum__.sum();
 452 :   }
 453 :   template <typename RNG, typename VecR, typename VecI, typename VecVar,
 454 :             stan::require_vector_like_vt<std::is_floating_point,
 455 :             VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
 456 :             VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
 457 :             VecVar>* = nullptr>
 458 :   inline void
 459 :   write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
 460 :                    VecVar& vars__, const bool
 461 :                    emit_transformed_parameters__ = true, const bool
 462 :                    emit_generated_quantities__ = true, std::ostream*
 463 :                    pstream__ = nullptr) const {
 464 :     using local_scalar_t__ = double;
 465 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 466 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 467 :     static constexpr bool propto__ = true;
 468 :     // suppress unused var warning
 469 :     (void) propto__;
 470 :     double lp__ = 0.0;
 471 :     // suppress unused var warning
 472 :     (void) lp__;
 473 :     int current_statement__ = 0;
 474 :     stan::math::accumulator<double> lp_accum__;
 475 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 476 :     // suppress unused var warning
 477 :     (void) DUMMY_VAR__;
 478 :     constexpr bool jacobian__ = false;
 479 :     static constexpr const char* function__ =
 480 :       "model182999187f68ac__namespace::write_array";
 481 :     // suppress unused var warning
 482 :     (void) function__;
 483 :     try {
 484 :       double rho = std::numeric_limits<double>::quiet_NaN();
 485 :       current_statement__ = 1;
 486 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 487 :               lp__);
 488 :       double sigma = std::numeric_limits<double>::quiet_NaN();
 489 :       current_statement__ = 2;
 490 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 491 :                 jacobian__>(0, lp__);
 492 :       double tau = std::numeric_limits<double>::quiet_NaN();
 493 :       current_statement__ = 3;
 494 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 495 :               lp__);
 496 :       double theta = std::numeric_limits<double>::quiet_NaN();
 497 :       current_statement__ = 4;
 498 :       theta = in__.template read<local_scalar_t__>();
 499 :       double mu = std::numeric_limits<double>::quiet_NaN();
 500 :       current_statement__ = 5;
 501 :       mu = in__.template read<local_scalar_t__>();
 502 :       Eigen::Matrix<double,-1,1> eps =
 503 :         Eigen::Matrix<double,-1,1>::Constant(K,
 504 :           std::numeric_limits<double>::quiet_NaN());
 505 :       current_statement__ = 6;
 506 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 507 :       Eigen::Matrix<double,-1,1> zeta =
 508 :         Eigen::Matrix<double,-1,1>::Constant(C,
 509 :           std::numeric_limits<double>::quiet_NaN());
 510 :       current_statement__ = 7;
 511 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 512 :       std::vector<Eigen::Matrix<double,-1,1>> delta =
 513 :         std::vector<Eigen::Matrix<double,-1,1>>(C,
 514 :           Eigen::Matrix<double,-1,1>::Constant(2,
 515 :             std::numeric_limits<double>::quiet_NaN()));
 516 :       current_statement__ = 8;
 517 :       delta = in__.template read_constrain_lub<
 518 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 519 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 520 :       double tau_sqrt = std::numeric_limits<double>::quiet_NaN();
 521 :       double sigma_sqrt = std::numeric_limits<double>::quiet_NaN();
 522 :       Eigen::Matrix<double,-1,1> zeta_scale =
 523 :         Eigen::Matrix<double,-1,1>::Constant(C,
 524 :           std::numeric_limits<double>::quiet_NaN());
 525 :       Eigen::Matrix<double,-1,1> eps_scale =
 526 :         Eigen::Matrix<double,-1,1>::Constant(K,
 527 :           std::numeric_limits<double>::quiet_NaN());
 528 :       out__.write(rho);
 529 :       out__.write(sigma);
 530 :       out__.write(tau);
 531 :       out__.write(theta);
 532 :       out__.write(mu);
 533 :       out__.write(eps);
 534 :       out__.write(zeta);
 535 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 536 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 537 :           out__.write(delta[(sym2__ - 1)][(sym1__ - 1)]);
 538 :         }
 539 :       }
 540 :       if (stan::math::logical_negation(
 541 :             (stan::math::primitive_value(emit_transformed_parameters__) ||
 542 :             stan::math::primitive_value(emit_generated_quantities__)))) {
 543 :         return ;
 544 :       }
 545 :       current_statement__ = 9;
 546 :       tau_sqrt = stan::math::sqrt(tau);
 547 :       current_statement__ = 10;
 548 :       sigma_sqrt = stan::math::sqrt(sigma);
 549 :       current_statement__ = 11;
 550 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 551 :         "assigning variable zeta_scale");
 552 :       current_statement__ = 12;
 553 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 554 :         "assigning variable eps_scale");
 555 :       current_statement__ = 9;
 556 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 557 :       current_statement__ = 10;
 558 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 559 :         sigma_sqrt, 0);
 560 :       if (emit_transformed_parameters__) {
 561 :         out__.write(tau_sqrt);
 562 :         out__.write(sigma_sqrt);
 563 :         out__.write(zeta_scale);
 564 :         out__.write(eps_scale);
 565 :       }
 566 :       if (stan::math::logical_negation(emit_generated_quantities__)) {
 567 :         return ;
 568 :       }
 569 :       Eigen::Matrix<double,-1,1> colony_dist =
 570 :         Eigen::Matrix<double,-1,1>::Constant(C,
 571 :           std::numeric_limits<double>::quiet_NaN());
 572 :       current_statement__ = 14;
 573 :       stan::model::assign(colony_dist, stan::math::rep_vector(0, C),
 574 :         "assigning variable colony_dist");
 575 :       {
 576 :         current_statement__ = 15;
 577 :         stan::math::validate_non_negative_index("dis", "C", C);
 578 :         current_statement__ = 16;
 579 :         stan::math::validate_non_negative_index("dis", "K", K);
 580 :         Eigen::Matrix<double,-1,-1> dis =
 581 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 582 :             std::numeric_limits<double>::quiet_NaN());
 583 :         current_statement__ = 18;
 584 :         stan::math::validate_non_negative_index("lambda", "C", C);
 585 :         current_statement__ = 19;
 586 :         stan::math::validate_non_negative_index("lambda", "K", K);
 587 :         Eigen::Matrix<double,-1,-1> lambda =
 588 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 589 :             std::numeric_limits<double>::quiet_NaN());
 590 :         current_statement__ = 21;
 591 :         stan::math::validate_non_negative_index("V", "C", C);
 592 :         Eigen::Matrix<double,-1,1> V =
 593 :           Eigen::Matrix<double,-1,1>::Constant(C,
 594 :             std::numeric_limits<double>::quiet_NaN());
 595 :         double alpha = std::numeric_limits<double>::quiet_NaN();
 596 :         current_statement__ = 23;
 597 :         alpha = 1e-12;
 598 :         current_statement__ = 29;
 599 :         for (int k = 1; k <= K; ++k) {
 600 :           current_statement__ = 27;
 601 :           for (int i = 1; i <= C; ++i) {
 602 :             current_statement__ = 24;
 603 :             stan::model::assign(dis,
 604 :               stan::math::sqrt(
 605 :                 (stan::math::square(
 606 :                    (stan::model::rvalue(delta, "delta",
 607 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 608 :                    stan::model::rvalue(trap, "trap",
 609 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 610 :                 +
 611 :                 stan::math::square(
 612 :                   (stan::model::rvalue(delta, "delta",
 613 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 614 :                   stan::model::rvalue(trap, "trap",
 615 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 616 :               "assigning variable dis", stan::model::index_uni(i),
 617 :               stan::model::index_uni(k));
 618 :             current_statement__ = 25;
 619 :             stan::model::assign(lambda,
 620 :               ((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 621 :                     stan::model::index_uni(k)) / (rho *
 622 :               stan::math::exp((theta *
 623 :                 stan::model::rvalue(floral, "floral",
 624 :                   stan::model::index_uni(k)))))) + mu) +
 625 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 626 :                 stan::model::index_uni(i))) +
 627 :               stan::model::rvalue(eps_scale, "eps_scale",
 628 :                 stan::model::index_uni(k))), "assigning variable lambda",
 629 :               stan::model::index_uni(i), stan::model::index_uni(k));
 630 :           }
 631 :         }
 632 :         current_statement__ = 32;
 633 :         for (int i = 1; i <= C; ++i) {
 634 :           current_statement__ = 30;
 635 :           stan::model::assign(V,
 636 :             stan::math::sum(
 637 :               stan::math::exp(
 638 :                 stan::model::rvalue(lambda, "lambda",
 639 :                   stan::model::index_uni(i), stan::model::index_omni()))),
 640 :             "assigning variable V", stan::model::index_uni(i));
 641 :         }
 642 :         current_statement__ = 35;
 643 :         for (int k = 1; k <= K; ++k) {
 644 :           current_statement__ = 33;
 645 :           stan::model::assign(colony_dist,
 646 :             stan::math::add(stan::model::deep_copy(colony_dist),
 647 :               stan::math::elt_divide(
 648 :                 stan::math::elt_multiply(
 649 :                   stan::model::rvalue(dis, "dis", stan::model::index_omni(),
 650 :                     stan::model::index_uni(k)),
 651 :                   stan::math::exp(
 652 :                     stan::model::rvalue(lambda, "lambda",
 653 :                       stan::model::index_omni(), stan::model::index_uni(k)))),
 654 :                 stan::math::add(V, alpha))), "assigning variable colony_dist");
 655 :         }
 656 :       }
 657 :       out__.write(colony_dist);
 658 :     } catch (const std::exception& e) {
 659 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 660 :     }
 661 :   }
 662 :   template <typename VecVar, typename VecI,
 663 :             stan::require_vector_t<VecVar>* = nullptr,
 664 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 665 :   inline void
 666 :   unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
 667 :                          VecVar& vars__, std::ostream* pstream__ = nullptr) const {
 668 :     using local_scalar_t__ = double;
 669 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 670 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 671 :     int current_statement__ = 0;
 672 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 673 :     // suppress unused var warning
 674 :     (void) DUMMY_VAR__;
 675 :     try {
 676 :       int pos__ = std::numeric_limits<int>::min();
 677 :       pos__ = 1;
 678 :       local_scalar_t__ rho = DUMMY_VAR__;
 679 :       current_statement__ = 1;
 680 :       rho = in__.read<local_scalar_t__>();
 681 :       out__.write_free_lb(0, rho);
 682 :       local_scalar_t__ sigma = DUMMY_VAR__;
 683 :       current_statement__ = 2;
 684 :       sigma = in__.read<local_scalar_t__>();
 685 :       out__.write_free_lb(0, sigma);
 686 :       local_scalar_t__ tau = DUMMY_VAR__;
 687 :       current_statement__ = 3;
 688 :       tau = in__.read<local_scalar_t__>();
 689 :       out__.write_free_lb(0, tau);
 690 :       local_scalar_t__ theta = DUMMY_VAR__;
 691 :       current_statement__ = 4;
 692 :       theta = in__.read<local_scalar_t__>();
 693 :       out__.write(theta);
 694 :       local_scalar_t__ mu = DUMMY_VAR__;
 695 :       current_statement__ = 5;
 696 :       mu = in__.read<local_scalar_t__>();
 697 :       out__.write(mu);
 698 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 699 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 700 :       current_statement__ = 6;
 701 :       stan::model::assign(eps,
 702 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
 703 :         "assigning variable eps");
 704 :       out__.write(eps);
 705 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 706 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 707 :       current_statement__ = 7;
 708 :       stan::model::assign(zeta,
 709 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(C),
 710 :         "assigning variable zeta");
 711 :       out__.write(zeta);
 712 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 713 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 714 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 715 :       current_statement__ = 8;
 716 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 717 :         current_statement__ = 8;
 718 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 719 :           current_statement__ = 8;
 720 :           stan::model::assign(delta, in__.read<local_scalar_t__>(),
 721 :             "assigning variable delta", stan::model::index_uni(sym2__),
 722 :             stan::model::index_uni(sym1__));
 723 :         }
 724 :       }
 725 :       out__.write_free_lub(lowerbound, upperbound, delta);
 726 :     } catch (const std::exception& e) {
 727 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 728 :     }
 729 :   }
 730 :   template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
 731 :   inline void
 732 :   transform_inits_impl(const stan::io::var_context& context__, VecVar&
 733 :                        vars__, std::ostream* pstream__ = nullptr) const {
 734 :     using local_scalar_t__ = double;
 735 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 736 :     int current_statement__ = 0;
 737 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 738 :     // suppress unused var warning
 739 :     (void) DUMMY_VAR__;
 740 :     try {
 741 :       current_statement__ = 1;
 742 :       context__.validate_dims("parameter initialization", "rho", "double",
 743 :         std::vector<size_t>{});
 744 :       current_statement__ = 2;
 745 :       context__.validate_dims("parameter initialization", "sigma", "double",
 746 :         std::vector<size_t>{});
 747 :       current_statement__ = 3;
 748 :       context__.validate_dims("parameter initialization", "tau", "double",
 749 :         std::vector<size_t>{});
 750 :       current_statement__ = 4;
 751 :       context__.validate_dims("parameter initialization", "theta", "double",
 752 :         std::vector<size_t>{});
 753 :       current_statement__ = 5;
 754 :       context__.validate_dims("parameter initialization", "mu", "double",
 755 :         std::vector<size_t>{});
 756 :       current_statement__ = 6;
 757 :       context__.validate_dims("parameter initialization", "eps", "double",
 758 :         std::vector<size_t>{static_cast<size_t>(K)});
 759 :       current_statement__ = 7;
 760 :       context__.validate_dims("parameter initialization", "zeta", "double",
 761 :         std::vector<size_t>{static_cast<size_t>(C)});
 762 :       current_statement__ = 8;
 763 :       context__.validate_dims("parameter initialization", "delta", "double",
 764 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(2)});
 765 :       int pos__ = std::numeric_limits<int>::min();
 766 :       pos__ = 1;
 767 :       local_scalar_t__ rho = DUMMY_VAR__;
 768 :       current_statement__ = 1;
 769 :       rho = context__.vals_r("rho")[(1 - 1)];
 770 :       out__.write_free_lb(0, rho);
 771 :       local_scalar_t__ sigma = DUMMY_VAR__;
 772 :       current_statement__ = 2;
 773 :       sigma = context__.vals_r("sigma")[(1 - 1)];
 774 :       out__.write_free_lb(0, sigma);
 775 :       local_scalar_t__ tau = DUMMY_VAR__;
 776 :       current_statement__ = 3;
 777 :       tau = context__.vals_r("tau")[(1 - 1)];
 778 :       out__.write_free_lb(0, tau);
 779 :       local_scalar_t__ theta = DUMMY_VAR__;
 780 :       current_statement__ = 4;
 781 :       theta = context__.vals_r("theta")[(1 - 1)];
 782 :       out__.write(theta);
 783 :       local_scalar_t__ mu = DUMMY_VAR__;
 784 :       current_statement__ = 5;
 785 :       mu = context__.vals_r("mu")[(1 - 1)];
 786 :       out__.write(mu);
 787 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 788 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 789 :       {
 790 :         std::vector<local_scalar_t__> eps_flat__;
 791 :         current_statement__ = 6;
 792 :         eps_flat__ = context__.vals_r("eps");
 793 :         current_statement__ = 6;
 794 :         pos__ = 1;
 795 :         current_statement__ = 6;
 796 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 797 :           current_statement__ = 6;
 798 :           stan::model::assign(eps, eps_flat__[(pos__ - 1)],
 799 :             "assigning variable eps", stan::model::index_uni(sym1__));
 800 :           current_statement__ = 6;
 801 :           pos__ = (pos__ + 1);
 802 :         }
 803 :       }
 804 :       out__.write(eps);
 805 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 806 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 807 :       {
 808 :         std::vector<local_scalar_t__> zeta_flat__;
 809 :         current_statement__ = 7;
 810 :         zeta_flat__ = context__.vals_r("zeta");
 811 :         current_statement__ = 7;
 812 :         pos__ = 1;
 813 :         current_statement__ = 7;
 814 :         for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 815 :           current_statement__ = 7;
 816 :           stan::model::assign(zeta, zeta_flat__[(pos__ - 1)],
 817 :             "assigning variable zeta", stan::model::index_uni(sym1__));
 818 :           current_statement__ = 7;
 819 :           pos__ = (pos__ + 1);
 820 :         }
 821 :       }
 822 :       out__.write(zeta);
 823 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 824 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 825 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 826 :       {
 827 :         std::vector<local_scalar_t__> delta_flat__;
 828 :         current_statement__ = 8;
 829 :         delta_flat__ = context__.vals_r("delta");
 830 :         current_statement__ = 8;
 831 :         pos__ = 1;
 832 :         current_statement__ = 8;
 833 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 834 :           current_statement__ = 8;
 835 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 836 :             current_statement__ = 8;
 837 :             stan::model::assign(delta, delta_flat__[(pos__ - 1)],
 838 :               "assigning variable delta", stan::model::index_uni(sym2__),
 839 :               stan::model::index_uni(sym1__));
 840 :             current_statement__ = 8;
 841 :             pos__ = (pos__ + 1);
 842 :           }
 843 :         }
 844 :       }
 845 :       out__.write_free_lub(lowerbound, upperbound, delta);
 846 :     } catch (const std::exception& e) {
 847 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 848 :     }
 849 :   }
 850 :   inline void
 851 :   get_param_names(std::vector<std::string>& names__, const bool
 852 :                   emit_transformed_parameters__ = true, const bool
 853 :                   emit_generated_quantities__ = true) const {
 854 :     names__ = std::vector<std::string>{"rho", "sigma", "tau", "theta", "mu",
 855 :                 "eps", "zeta", "delta"};
 856 :     if (emit_transformed_parameters__) {
 857 :       std::vector<std::string>
 858 :         temp{"tau_sqrt", "sigma_sqrt", "zeta_scale", "eps_scale"};
 859 :       names__.reserve(names__.size() + temp.size());
 860 :       names__.insert(names__.end(), temp.begin(), temp.end());
 861 :     }
 862 :     if (emit_generated_quantities__) {
 863 :       std::vector<std::string> temp{"colony_dist"};
 864 :       names__.reserve(names__.size() + temp.size());
 865 :       names__.insert(names__.end(), temp.begin(), temp.end());
 866 :     }
 867 :   }
 868 :   inline void
 869 :   get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
 870 :            emit_transformed_parameters__ = true, const bool
 871 :            emit_generated_quantities__ = true) const {
 872 :     dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
 873 :                 std::vector<size_t>{}, std::vector<size_t>{},
 874 :                 std::vector<size_t>{}, std::vector<size_t>{},
 875 :                 std::vector<size_t>{static_cast<size_t>(K)},
 876 :                 std::vector<size_t>{static_cast<size_t>(C)},
 877 :                 std::vector<size_t>{static_cast<size_t>(C),
 878 :                   static_cast<size_t>(2)}};
 879 :     if (emit_transformed_parameters__) {
 880 :       std::vector<std::vector<size_t>>
 881 :         temp{std::vector<size_t>{}, std::vector<size_t>{},
 882 :              std::vector<size_t>{static_cast<size_t>(C)},
 883 :              std::vector<size_t>{static_cast<size_t>(K)}};
 884 :       dimss__.reserve(dimss__.size() + temp.size());
 885 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 886 :     }
 887 :     if (emit_generated_quantities__) {
 888 :       std::vector<std::vector<size_t>>
 889 :         temp{std::vector<size_t>{static_cast<size_t>(C)}};
 890 :       dimss__.reserve(dimss__.size() + temp.size());
 891 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 892 :     }
 893 :   }
 894 :   inline void
 895 :   constrained_param_names(std::vector<std::string>& param_names__, bool
 896 :                           emit_transformed_parameters__ = true, bool
 897 :                           emit_generated_quantities__ = true) const final {
 898 :     param_names__.emplace_back(std::string() + "rho");
 899 :     param_names__.emplace_back(std::string() + "sigma");
 900 :     param_names__.emplace_back(std::string() + "tau");
 901 :     param_names__.emplace_back(std::string() + "theta");
 902 :     param_names__.emplace_back(std::string() + "mu");
 903 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 904 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 905 :         std::to_string(sym1__));
 906 :     }
 907 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 908 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 909 :         std::to_string(sym1__));
 910 :     }
 911 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 912 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 913 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 914 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 915 :       }
 916 :     }
 917 :     if (emit_transformed_parameters__) {
 918 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 919 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 920 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 921 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 922 :           std::to_string(sym1__));
 923 :       }
 924 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 925 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 926 :           std::to_string(sym1__));
 927 :       }
 928 :     }
 929 :     if (emit_generated_quantities__) {
 930 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 931 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
 932 :           std::to_string(sym1__));
 933 :       }
 934 :     }
 935 :   }
 936 :   inline void
 937 :   unconstrained_param_names(std::vector<std::string>& param_names__, bool
 938 :                             emit_transformed_parameters__ = true, bool
 939 :                             emit_generated_quantities__ = true) const final {
 940 :     param_names__.emplace_back(std::string() + "rho");
 941 :     param_names__.emplace_back(std::string() + "sigma");
 942 :     param_names__.emplace_back(std::string() + "tau");
 943 :     param_names__.emplace_back(std::string() + "theta");
 944 :     param_names__.emplace_back(std::string() + "mu");
 945 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 946 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 947 :         std::to_string(sym1__));
 948 :     }
 949 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 950 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 951 :         std::to_string(sym1__));
 952 :     }
 953 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 954 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 955 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 956 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 957 :       }
 958 :     }
 959 :     if (emit_transformed_parameters__) {
 960 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 961 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 962 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 963 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 964 :           std::to_string(sym1__));
 965 :       }
 966 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 967 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 968 :           std::to_string(sym1__));
 969 :       }
 970 :     }
 971 :     if (emit_generated_quantities__) {
 972 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 973 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
 974 :           std::to_string(sym1__));
 975 :       }
 976 :     }
 977 :   }
 978 :   inline std::string get_constrained_sizedtypes() const {
 979 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
 980 :   }
 981 :   inline std::string get_unconstrained_sizedtypes() const {
 982 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
 983 :   }
 984 :   // Begin method overload boilerplate
 985 :   template <typename RNG> inline void
 986 :   write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
 987 :               Eigen::Matrix<double,-1,1>& vars, const bool
 988 :               emit_transformed_parameters = true, const bool
 989 :               emit_generated_quantities = true, std::ostream*
 990 :               pstream = nullptr) const {
 991 :     const size_t num_params__ = (((((((1 + 1) + 1) + 1) + 1) + K) + C) + (C *
 992 :       2));
 993 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
 994 :       C) + K));
 995 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
 996 :     const size_t num_to_write = num_params__ + num_transformed +
 997 :       num_gen_quantities;
 998 :     std::vector<int> params_i;
 999 :     vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
1000 :              std::numeric_limits<double>::quiet_NaN());
1001 :     write_array_impl(base_rng, params_r, params_i, vars,
1002 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1003 :   }
1004 :   template <typename RNG> inline void
1005 :   write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
1006 :               params_i, std::vector<double>& vars, bool
1007 :               emit_transformed_parameters = true, bool
1008 :               emit_generated_quantities = true, std::ostream*
1009 :               pstream = nullptr) const {
1010 :     const size_t num_params__ = (((((((1 + 1) + 1) + 1) + 1) + K) + C) + (C *
1011 :       2));
1012 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1013 :       C) + K));
1014 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1015 :     const size_t num_to_write = num_params__ + num_transformed +
1016 :       num_gen_quantities;
1017 :     vars = std::vector<double>(num_to_write,
1018 :              std::numeric_limits<double>::quiet_NaN());
1019 :     write_array_impl(base_rng, params_r, params_i, vars,
1020 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1021 :   }
1022 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1023 :   log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
1024 :     Eigen::Matrix<int,-1,1> params_i;
1025 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1026 :   }
1027 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1028 :   log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
1029 :            std::ostream* pstream = nullptr) const {
1030 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1031 :   }
1032 :   inline void
1033 :   transform_inits(const stan::io::var_context& context,
1034 :                   Eigen::Matrix<double,-1,1>& params_r, std::ostream*
1035 :                   pstream = nullptr) const final {
1036 :     std::vector<double> params_r_vec(params_r.size());
1037 :     std::vector<int> params_i;
1038 :     transform_inits(context, params_i, params_r_vec, pstream);
1039 :     params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
1040 :                  params_r_vec.size());
1041 :   }
1042 :   inline void
1043 :   transform_inits(const stan::io::var_context& context, std::vector<int>&
1044 :                   params_i, std::vector<double>& vars, std::ostream*
1045 :                   pstream__ = nullptr) const {
1046 :     vars.resize(num_params_r__);
1047 :     transform_inits_impl(context, vars, pstream__);
1048 :   }
1049 :   inline void
1050 :   unconstrain_array(const std::vector<double>& params_constrained,
1051 :                     std::vector<double>& params_unconstrained, std::ostream*
1052 :                     pstream = nullptr) const {
1053 :     const std::vector<int> params_i;
1054 :     params_unconstrained = std::vector<double>(num_params_r__,
1055 :                              std::numeric_limits<double>::quiet_NaN());
1056 :     unconstrain_array_impl(params_constrained, params_i,
1057 :       params_unconstrained, pstream);
1058 :   }
1059 :   inline void
1060 :   unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
1061 :                     Eigen::Matrix<double,-1,1>& params_unconstrained,
1062 :                     std::ostream* pstream = nullptr) const {
1063 :     const std::vector<int> params_i;
1064 :     params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
1065 :                              std::numeric_limits<double>::quiet_NaN());
1066 :     unconstrain_array_impl(params_constrained, params_i,
1067 :       params_unconstrained, pstream);
1068 :   }
1069 : };
1070 : }
1071 : using stan_model = model182999187f68ac__namespace::model182999187f68ac_;
1072 : #ifndef USING_R
1073 : // Boilerplate
1074 : stan::model::model_base&
1075 : new_model(stan::io::var_context& data_context, unsigned int seed,
1076 :           std::ostream* msg_stream) {
1077 :   stan_model* m = new stan_model(data_context, seed, msg_stream);
1078 :   return *m;
1079 : }
1080 : stan::math::profile_map& get_stan_profile_data() {
1081 :   return model182999187f68ac__namespace::profiles__;
1082 : }
1083 : #endif
1084 : #endif
1085 : 
1086 : RCPP_MODULE(stan_fit4model182999187f68ac__mod) {
1087 :   class_<rstan::stan_fit<stan_model, boost::random::ecuyer1988> >(
1088 :       "stan_fit4model182999187f68ac_")
1089 : 
1090 :       .constructor<SEXP, SEXP, SEXP>()
1091 : 
1092 :       .method(
1093 :           "call_sampler",
1094 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::call_sampler)
1095 :       .method(
1096 :           "param_names",
1097 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_names)
1098 :       .method("param_names_oi",
1099 :               &rstan::stan_fit<stan_model,
1100 :                                boost::random::ecuyer1988>::param_names_oi)
1101 :       .method("param_fnames_oi",
1102 :               &rstan::stan_fit<stan_model,
1103 :                                boost::random::ecuyer1988>::param_fnames_oi)
1104 :       .method(
1105 :           "param_dims",
1106 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_dims)
1107 :       .method("param_dims_oi",
1108 :               &rstan::stan_fit<stan_model,
1109 :                                boost::random::ecuyer1988>::param_dims_oi)
1110 :       .method("update_param_oi",
1111 :               &rstan::stan_fit<stan_model,
1112 :                                boost::random::ecuyer1988>::update_param_oi)
1113 :       .method("param_oi_tidx",
1114 :               &rstan::stan_fit<stan_model,
1115 :                                boost::random::ecuyer1988>::param_oi_tidx)
1116 :       .method("grad_log_prob",
1117 :               &rstan::stan_fit<stan_model,
1118 :                                boost::random::ecuyer1988>::grad_log_prob)
1119 :       .method("log_prob",
1120 :               &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::log_prob)
1121 :       .method("unconstrain_pars",
1122 :               &rstan::stan_fit<stan_model,
1123 :                                boost::random::ecuyer1988>::unconstrain_pars)
1124 :       .method("constrain_pars",
1125 :               &rstan::stan_fit<stan_model,
1126 :                                boost::random::ecuyer1988>::constrain_pars)
1127 :       .method(
1128 :           "num_pars_unconstrained",
1129 :           &rstan::stan_fit<stan_model,
1130 :                            boost::random::ecuyer1988>::num_pars_unconstrained)
1131 :       .method(
1132 :           "unconstrained_param_names",
1133 :           &rstan::stan_fit<
1134 :               stan_model, boost::random::ecuyer1988>::unconstrained_param_names)
1135 :       .method(
1136 :           "constrained_param_names",
1137 :           &rstan::stan_fit<stan_model,
1138 :                            boost::random::ecuyer1988>::constrained_param_names)
1139 :       .method("standalone_gqs",
1140 :               &rstan::stan_fit<stan_model,
1141 :                                boost::random::ecuyer1988>::standalone_gqs);
1142 : }
1143 : 
1144 : 
1145 : // declarations
1146 : extern "C" {
1147 : SEXP file18299969e06632( ) ;
1148 : }
1149 : 
1150 : // definition
1151 : SEXP file18299969e06632() {
1152 :  return Rcpp::wrap("anon_model");
1153 : }
make cmd is
  make -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/etc/Makeconf' -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/share/make/shlib.mk' CXX='$(CXX17) $(CXX17STD)' CXXFLAGS='$(CXX17FLAGS)' CXXPICFLAGS='$(CXX17PICFLAGS)' SHLIB_LDFLAGS='$(SHLIB_CXX17LDFLAGS)' SHLIB_LD='$(SHLIB_CXX17LD)' SHLIB='file18299969e06632.so' OBJECTS='file18299969e06632.o'

make would use
g++ -std=gnu++17 -I"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/include" -DNDEBUG   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/java/17.0.6/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include/flexiblas    -fpic  -O2 -ftree-vectorize -march=x86-64-v3 -fno-math-errno  -c file18299969e06632.cpp -o file18299969e06632.o
if test  "zfile18299969e06632.o" != "z"; then \
  echo g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file18299969e06632.so file18299969e06632.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
  g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file18299969e06632.so file18299969e06632.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
fi

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 2: 
Chain 2: Gradient evaluation took 0.057249 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 572.49 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 4: 
Chain 4: Gradient evaluation took 0.056183 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 561.83 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 1: 
Chain 1: Gradient evaluation took 0.058229 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 582.29 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 3: 
Chain 3: Gradient evaluation took 0.058846 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 588.46 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 4: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain Chain 13: : Iteration:    1 / 10000 [  0%]  (Warmup)Iteration:    1 / 10000 [  0%]  (Warmup)

Chain 4: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 3: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
3: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 4: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 3: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 4: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 3: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 4: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 4: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 3: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 3: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 4: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 3: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 3: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 4: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 3: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 4: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 3: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 4: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
