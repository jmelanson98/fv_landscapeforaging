[1] "Loading landscape metric raster."

TRANSLATING MODEL '' FROM Stan CODE TO C++ CODE NOW.
OS: x86_64, linux-gnu; rstan: 2.32.7; Rcpp: 1.0.14; inline: 0.3.21 
 >> setting environment variables: 
PKG_LIBS =  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb 
PKG_CPPFLAGS =   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1 
 >> Program source :

   1 : 
   2 : // includes from the plugin
   3 : // [[Rcpp::plugins(cpp14)]]
   4 : 
   5 : 
   6 : // user includes
   7 : #include <Rcpp.h>
   8 : using namespace Rcpp;
   9 : #ifndef MODELS_HPP
  10 : #define MODELS_HPP
  11 : #define STAN__SERVICES__COMMAND_HPP
  12 : #include <rstan/rstaninc.hpp>
  13 : #ifndef USE_STANC3
  14 : #define USE_STANC3
  15 : #endif
  16 : // Code generated by stanc v2.32.2
  17 : #include <stan/model/model_header.hpp>
  18 : namespace model108a5208b6da7__namespace {
  19 : using stan::model::model_base_crtp;
  20 : using namespace stan::math;
  21 : stan::math::profile_map profiles__;
  22 : static constexpr std::array<const char*, 85> locations_array__ =
  23 :   {" (found before start of program)",
  24 :   " (in 'anon_model', line 19, column 0 to column 18)",
  25 :   " (in 'anon_model', line 20, column 0 to column 20)",
  26 :   " (in 'anon_model', line 21, column 0 to column 18)",
  27 :   " (in 'anon_model', line 22, column 0 to column 11)",
  28 :   " (in 'anon_model', line 23, column 0 to column 11)",
  29 :   " (in 'anon_model', line 24, column 0 to column 8)",
  30 :   " (in 'anon_model', line 25, column 0 to column 14)",
  31 :   " (in 'anon_model', line 26, column 0 to column 15)",
  32 :   " (in 'anon_model', line 27, column 0 to column 62)",
  33 :   " (in 'anon_model', line 30, column 2 to column 37)",
  34 :   " (in 'anon_model', line 31, column 2 to column 41)",
  35 :   " (in 'anon_model', line 32, column 2 to column 41)",
  36 :   " (in 'anon_model', line 33, column 2 to column 39)",
  37 :   " (in 'anon_model', line 67, column 2 to column 24)",
  38 :   " (in 'anon_model', line 68, column 2 to column 33)",
  39 :   " (in 'anon_model', line 72, column 11 to column 12)",
  40 :   " (in 'anon_model', line 72, column 13 to column 14)",
  41 :   " (in 'anon_model', line 72, column 4 to column 20)",
  42 :   " (in 'anon_model', line 73, column 11 to column 12)",
  43 :   " (in 'anon_model', line 73, column 13 to column 14)",
  44 :   " (in 'anon_model', line 73, column 4 to column 23)",
  45 :   " (in 'anon_model', line 74, column 11 to column 12)",
  46 :   " (in 'anon_model', line 74, column 4 to column 16)",
  47 :   " (in 'anon_model', line 75, column 4 to column 24)",
  48 :   " (in 'anon_model', line 80, column 8 to column 92)",
  49 :   " (in 'anon_model', line 81, column 8 to column 117)",
  50 :   " (in 'anon_model', line 79, column 19 to line 82, column 7)",
  51 :   " (in 'anon_model', line 79, column 6 to line 82, column 7)",
  52 :   " (in 'anon_model', line 78, column 17 to line 83, column 5)",
  53 :   " (in 'anon_model', line 78, column 4 to line 83, column 5)",
  54 :   " (in 'anon_model', line 87, column 6 to column 34)",
  55 :   " (in 'anon_model', line 86, column 18 to line 88, column 5)",
  56 :   " (in 'anon_model', line 86, column 4 to line 88, column 5)",
  57 :   " (in 'anon_model', line 93, column 6 to column 79)",
  58 :   " (in 'anon_model', line 92, column 18 to line 94, column 5)",
  59 :   " (in 'anon_model', line 92, column 4 to line 94, column 5)",
  60 :   " (in 'anon_model', line 71, column 2 to line 95, column 3)",
  61 :   " (in 'anon_model', line 40, column 7 to column 8)",
  62 :   " (in 'anon_model', line 40, column 9 to column 10)",
  63 :   " (in 'anon_model', line 40, column 0 to column 16)",
  64 :   " (in 'anon_model', line 41, column 7 to column 8)",
  65 :   " (in 'anon_model', line 41, column 9 to column 10)",
  66 :   " (in 'anon_model', line 41, column 0 to column 19)",
  67 :   " (in 'anon_model', line 42, column 7 to column 8)",
  68 :   " (in 'anon_model', line 42, column 0 to column 22)",
  69 :   " (in 'anon_model', line 44, column 0 to column 27)",
  70 :   " (in 'anon_model', line 45, column 0 to column 25)",
  71 :   " (in 'anon_model', line 46, column 0 to column 36)",
  72 :   " (in 'anon_model', line 47, column 0 to column 24)",
  73 :   " (in 'anon_model', line 48, column 0 to column 27)",
  74 :   " (in 'anon_model', line 49, column 0 to column 27)",
  75 :   " (in 'anon_model', line 51, column 0 to column 19)",
  76 :   " (in 'anon_model', line 52, column 0 to column 20)",
  77 :   " (in 'anon_model', line 56, column 8 to column 92)",
  78 :   " (in 'anon_model', line 57, column 8 to column 117)",
  79 :   " (in 'anon_model', line 55, column 19 to line 58, column 7)",
  80 :   " (in 'anon_model', line 55, column 6 to line 58, column 7)",
  81 :   " (in 'anon_model', line 60, column 4 to column 39)",
  82 :   " (in 'anon_model', line 63, column 4 to column 37)",
  83 :   " (in 'anon_model', line 54, column 17 to line 64, column 5)",
  84 :   " (in 'anon_model', line 54, column 4 to line 64, column 5)",
  85 :   " (in 'anon_model', line 5, column 0 to column 15)",
  86 :   " (in 'anon_model', line 6, column 0 to column 15)",
  87 :   " (in 'anon_model', line 7, column 7 to column 8)",
  88 :   " (in 'anon_model', line 7, column 0 to column 18)",
  89 :   " (in 'anon_model', line 8, column 6 to column 7)",
  90 :   " (in 'anon_model', line 8, column 9 to column 10)",
  91 :   " (in 'anon_model', line 8, column 0 to column 12)",
  92 :   " (in 'anon_model', line 9, column 0 to column 16)",
  93 :   " (in 'anon_model', line 10, column 0 to column 16)",
  94 :   " (in 'anon_model', line 11, column 7 to column 8)",
  95 :   " (in 'anon_model', line 11, column 0 to column 17)",
  96 :   " (in 'anon_model', line 12, column 7 to column 8)",
  97 :   " (in 'anon_model', line 12, column 0 to column 20)",
  98 :   " (in 'anon_model', line 13, column 0 to column 25)",
  99 :   " (in 'anon_model', line 14, column 0 to column 21)",
 100 :   " (in 'anon_model', line 15, column 0 to column 22)",
 101 :   " (in 'anon_model', line 16, column 0 to column 22)",
 102 :   " (in 'anon_model', line 25, column 7 to column 8)",
 103 :   " (in 'anon_model', line 26, column 7 to column 8)",
 104 :   " (in 'anon_model', line 27, column 7 to column 8)",
 105 :   " (in 'anon_model', line 32, column 9 to column 10)",
 106 :   " (in 'anon_model', line 33, column 9 to column 10)",
 107 :   " (in 'anon_model', line 67, column 9 to column 10)"};
 108 : class model108a5208b6da7_ final : public model_base_crtp<model108a5208b6da7_> {
 109 : private:
 110 :   int C;
 111 :   int K;
 112 :   Eigen::Matrix<double,-1,-1> trap_data__;
 113 :   std::vector<std::vector<int>> y;
 114 :   double lowerbound;
 115 :   double upperbound;
 116 :   Eigen::Matrix<double,-1,1> floral_data__;
 117 :   Eigen::Matrix<double,-1,1> landscape_data__;
 118 :   double rho_center;
 119 :   double rho_sd;
 120 :   double priorVa;
 121 :   double priorCo;
 122 :   Eigen::Map<Eigen::Matrix<double,-1,-1>> trap{nullptr, 0, 0};
 123 :   Eigen::Map<Eigen::Matrix<double,-1,1>> floral{nullptr, 0};
 124 :   Eigen::Map<Eigen::Matrix<double,-1,1>> landscape{nullptr, 0};
 125 : public:
 126 :   ~model108a5208b6da7_() {}
 127 :   model108a5208b6da7_(stan::io::var_context& context__, unsigned int
 128 :                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
 129 :       : model_base_crtp(0) {
 130 :     int current_statement__ = 0;
 131 :     using local_scalar_t__ = double;
 132 :     boost::ecuyer1988 base_rng__ =
 133 :       stan::services::util::create_rng(random_seed__, 0);
 134 :     // suppress unused var warning
 135 :     (void) base_rng__;
 136 :     static constexpr const char* function__ =
 137 :       "model108a5208b6da7__namespace::model108a5208b6da7_";
 138 :     // suppress unused var warning
 139 :     (void) function__;
 140 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 141 :     // suppress unused var warning
 142 :     (void) DUMMY_VAR__;
 143 :     try {
 144 :       int pos__ = std::numeric_limits<int>::min();
 145 :       pos__ = 1;
 146 :       current_statement__ = 62;
 147 :       context__.validate_dims("data initialization", "C", "int",
 148 :         std::vector<size_t>{});
 149 :       C = std::numeric_limits<int>::min();
 150 :       current_statement__ = 62;
 151 :       C = context__.vals_i("C")[(1 - 1)];
 152 :       current_statement__ = 62;
 153 :       stan::math::check_greater_or_equal(function__, "C", C, 1);
 154 :       current_statement__ = 63;
 155 :       context__.validate_dims("data initialization", "K", "int",
 156 :         std::vector<size_t>{});
 157 :       K = std::numeric_limits<int>::min();
 158 :       current_statement__ = 63;
 159 :       K = context__.vals_i("K")[(1 - 1)];
 160 :       current_statement__ = 63;
 161 :       stan::math::check_greater_or_equal(function__, "K", K, 1);
 162 :       current_statement__ = 64;
 163 :       stan::math::validate_non_negative_index("trap", "K", K);
 164 :       current_statement__ = 65;
 165 :       context__.validate_dims("data initialization", "trap", "double",
 166 :         std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(2)});
 167 :       trap_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, 2,
 168 :                       std::numeric_limits<double>::quiet_NaN());
 169 :       new (&trap) Eigen::Map<Eigen::Matrix<double,-1,-1>>(trap_data__.data(),
 170 :         K, 2);
 171 :       {
 172 :         std::vector<local_scalar_t__> trap_flat__;
 173 :         current_statement__ = 65;
 174 :         trap_flat__ = context__.vals_r("trap");
 175 :         current_statement__ = 65;
 176 :         pos__ = 1;
 177 :         current_statement__ = 65;
 178 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 179 :           current_statement__ = 65;
 180 :           for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
 181 :             current_statement__ = 65;
 182 :             stan::model::assign(trap, trap_flat__[(pos__ - 1)],
 183 :               "assigning variable trap", stan::model::index_uni(sym2__),
 184 :               stan::model::index_uni(sym1__));
 185 :             current_statement__ = 65;
 186 :             pos__ = (pos__ + 1);
 187 :           }
 188 :         }
 189 :       }
 190 :       current_statement__ = 66;
 191 :       stan::math::validate_non_negative_index("y", "C", C);
 192 :       current_statement__ = 67;
 193 :       stan::math::validate_non_negative_index("y", "K", K);
 194 :       current_statement__ = 68;
 195 :       context__.validate_dims("data initialization", "y", "int",
 196 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(K)});
 197 :       y = std::vector<std::vector<int>>(C,
 198 :             std::vector<int>(K, std::numeric_limits<int>::min()));
 199 :       {
 200 :         std::vector<int> y_flat__;
 201 :         current_statement__ = 68;
 202 :         y_flat__ = context__.vals_i("y");
 203 :         current_statement__ = 68;
 204 :         pos__ = 1;
 205 :         current_statement__ = 68;
 206 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 207 :           current_statement__ = 68;
 208 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 209 :             current_statement__ = 68;
 210 :             stan::model::assign(y, y_flat__[(pos__ - 1)],
 211 :               "assigning variable y", stan::model::index_uni(sym2__),
 212 :               stan::model::index_uni(sym1__));
 213 :             current_statement__ = 68;
 214 :             pos__ = (pos__ + 1);
 215 :           }
 216 :         }
 217 :       }
 218 :       current_statement__ = 69;
 219 :       context__.validate_dims("data initialization", "lowerbound", "double",
 220 :         std::vector<size_t>{});
 221 :       lowerbound = std::numeric_limits<double>::quiet_NaN();
 222 :       current_statement__ = 69;
 223 :       lowerbound = context__.vals_r("lowerbound")[(1 - 1)];
 224 :       current_statement__ = 70;
 225 :       context__.validate_dims("data initialization", "upperbound", "double",
 226 :         std::vector<size_t>{});
 227 :       upperbound = std::numeric_limits<double>::quiet_NaN();
 228 :       current_statement__ = 70;
 229 :       upperbound = context__.vals_r("upperbound")[(1 - 1)];
 230 :       current_statement__ = 71;
 231 :       stan::math::validate_non_negative_index("floral", "K", K);
 232 :       current_statement__ = 72;
 233 :       context__.validate_dims("data initialization", "floral", "double",
 234 :         std::vector<size_t>{static_cast<size_t>(K)});
 235 :       floral_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
 236 :                         std::numeric_limits<double>::quiet_NaN());
 237 :       new (&floral)
 238 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(floral_data__.data(), K);
 239 :       {
 240 :         std::vector<local_scalar_t__> floral_flat__;
 241 :         current_statement__ = 72;
 242 :         floral_flat__ = context__.vals_r("floral");
 243 :         current_statement__ = 72;
 244 :         pos__ = 1;
 245 :         current_statement__ = 72;
 246 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 247 :           current_statement__ = 72;
 248 :           stan::model::assign(floral, floral_flat__[(pos__ - 1)],
 249 :             "assigning variable floral", stan::model::index_uni(sym1__));
 250 :           current_statement__ = 72;
 251 :           pos__ = (pos__ + 1);
 252 :         }
 253 :       }
 254 :       current_statement__ = 73;
 255 :       stan::math::validate_non_negative_index("landscape", "K", K);
 256 :       current_statement__ = 74;
 257 :       context__.validate_dims("data initialization", "landscape", "double",
 258 :         std::vector<size_t>{static_cast<size_t>(K)});
 259 :       landscape_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
 260 :                            std::numeric_limits<double>::quiet_NaN());
 261 :       new (&landscape)
 262 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(landscape_data__.data(), K);
 263 :       {
 264 :         std::vector<local_scalar_t__> landscape_flat__;
 265 :         current_statement__ = 74;
 266 :         landscape_flat__ = context__.vals_r("landscape");
 267 :         current_statement__ = 74;
 268 :         pos__ = 1;
 269 :         current_statement__ = 74;
 270 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 271 :           current_statement__ = 74;
 272 :           stan::model::assign(landscape, landscape_flat__[(pos__ - 1)],
 273 :             "assigning variable landscape", stan::model::index_uni(sym1__));
 274 :           current_statement__ = 74;
 275 :           pos__ = (pos__ + 1);
 276 :         }
 277 :       }
 278 :       current_statement__ = 75;
 279 :       context__.validate_dims("data initialization", "rho_center", "double",
 280 :         std::vector<size_t>{});
 281 :       rho_center = std::numeric_limits<double>::quiet_NaN();
 282 :       current_statement__ = 75;
 283 :       rho_center = context__.vals_r("rho_center")[(1 - 1)];
 284 :       current_statement__ = 75;
 285 :       stan::math::check_greater_or_equal(function__, "rho_center",
 286 :         rho_center, 0);
 287 :       current_statement__ = 76;
 288 :       context__.validate_dims("data initialization", "rho_sd", "double",
 289 :         std::vector<size_t>{});
 290 :       rho_sd = std::numeric_limits<double>::quiet_NaN();
 291 :       current_statement__ = 76;
 292 :       rho_sd = context__.vals_r("rho_sd")[(1 - 1)];
 293 :       current_statement__ = 76;
 294 :       stan::math::check_greater_or_equal(function__, "rho_sd", rho_sd, 0);
 295 :       current_statement__ = 77;
 296 :       context__.validate_dims("data initialization", "priorVa", "double",
 297 :         std::vector<size_t>{});
 298 :       priorVa = std::numeric_limits<double>::quiet_NaN();
 299 :       current_statement__ = 77;
 300 :       priorVa = context__.vals_r("priorVa")[(1 - 1)];
 301 :       current_statement__ = 77;
 302 :       stan::math::check_greater_or_equal(function__, "priorVa", priorVa, 0);
 303 :       current_statement__ = 78;
 304 :       context__.validate_dims("data initialization", "priorCo", "double",
 305 :         std::vector<size_t>{});
 306 :       priorCo = std::numeric_limits<double>::quiet_NaN();
 307 :       current_statement__ = 78;
 308 :       priorCo = context__.vals_r("priorCo")[(1 - 1)];
 309 :       current_statement__ = 78;
 310 :       stan::math::check_greater_or_equal(function__, "priorCo", priorCo, 0);
 311 :       current_statement__ = 79;
 312 :       stan::math::validate_non_negative_index("eps", "K", K);
 313 :       current_statement__ = 80;
 314 :       stan::math::validate_non_negative_index("zeta", "C", C);
 315 :       current_statement__ = 81;
 316 :       stan::math::validate_non_negative_index("delta", "C", C);
 317 :       current_statement__ = 82;
 318 :       stan::math::validate_non_negative_index("zeta_scale", "C", C);
 319 :       current_statement__ = 83;
 320 :       stan::math::validate_non_negative_index("eps_scale", "K", K);
 321 :       current_statement__ = 84;
 322 :       stan::math::validate_non_negative_index("colony_dist", "C", C);
 323 :     } catch (const std::exception& e) {
 324 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 325 :     }
 326 :     num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + K + C + (C * 2);
 327 :   }
 328 :   inline std::string model_name() const final {
 329 :     return "model108a5208b6da7_";
 330 :   }
 331 :   inline std::vector<std::string> model_compile_info() const noexcept {
 332 :     return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
 333 :              "stancflags = --"};
 334 :   }
 335 :   template <bool propto__, bool jacobian__, typename VecR, typename VecI,
 336 :             stan::require_vector_like_t<VecR>* = nullptr,
 337 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 338 :   inline stan::scalar_type_t<VecR>
 339 :   log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
 340 :                 pstream__ = nullptr) const {
 341 :     using T__ = stan::scalar_type_t<VecR>;
 342 :     using local_scalar_t__ = T__;
 343 :     T__ lp__(0.0);
 344 :     stan::math::accumulator<T__> lp_accum__;
 345 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 346 :     int current_statement__ = 0;
 347 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 348 :     // suppress unused var warning
 349 :     (void) DUMMY_VAR__;
 350 :     static constexpr const char* function__ =
 351 :       "model108a5208b6da7__namespace::log_prob";
 352 :     // suppress unused var warning
 353 :     (void) function__;
 354 :     try {
 355 :       local_scalar_t__ rho = DUMMY_VAR__;
 356 :       current_statement__ = 1;
 357 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 358 :               lp__);
 359 :       local_scalar_t__ sigma = DUMMY_VAR__;
 360 :       current_statement__ = 2;
 361 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 362 :                 jacobian__>(0, lp__);
 363 :       local_scalar_t__ tau = DUMMY_VAR__;
 364 :       current_statement__ = 3;
 365 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 366 :               lp__);
 367 :       local_scalar_t__ alpha = DUMMY_VAR__;
 368 :       current_statement__ = 4;
 369 :       alpha = in__.template read<local_scalar_t__>();
 370 :       local_scalar_t__ theta = DUMMY_VAR__;
 371 :       current_statement__ = 5;
 372 :       theta = in__.template read<local_scalar_t__>();
 373 :       local_scalar_t__ mu = DUMMY_VAR__;
 374 :       current_statement__ = 6;
 375 :       mu = in__.template read<local_scalar_t__>();
 376 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 377 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 378 :       current_statement__ = 7;
 379 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 380 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 381 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 382 :       current_statement__ = 8;
 383 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 384 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 385 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 386 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 387 :       current_statement__ = 9;
 388 :       delta = in__.template read_constrain_lub<
 389 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 390 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 391 :       local_scalar_t__ tau_sqrt = DUMMY_VAR__;
 392 :       current_statement__ = 10;
 393 :       tau_sqrt = stan::math::sqrt(tau);
 394 :       local_scalar_t__ sigma_sqrt = DUMMY_VAR__;
 395 :       current_statement__ = 11;
 396 :       sigma_sqrt = stan::math::sqrt(sigma);
 397 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta_scale =
 398 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 399 :       current_statement__ = 12;
 400 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 401 :         "assigning variable zeta_scale");
 402 :       Eigen::Matrix<local_scalar_t__,-1,1> eps_scale =
 403 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 404 :       current_statement__ = 13;
 405 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 406 :         "assigning variable eps_scale");
 407 :       current_statement__ = 10;
 408 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 409 :       current_statement__ = 11;
 410 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 411 :         sigma_sqrt, 0);
 412 :       {
 413 :         current_statement__ = 38;
 414 :         stan::math::validate_non_negative_index("dis", "C", C);
 415 :         current_statement__ = 39;
 416 :         stan::math::validate_non_negative_index("dis", "K", K);
 417 :         Eigen::Matrix<local_scalar_t__,-1,-1> dis =
 418 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 419 :         current_statement__ = 41;
 420 :         stan::math::validate_non_negative_index("lambda", "C", C);
 421 :         current_statement__ = 42;
 422 :         stan::math::validate_non_negative_index("lambda", "K", K);
 423 :         Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
 424 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 425 :         current_statement__ = 44;
 426 :         stan::math::validate_non_negative_index("multi_probs", "K", K);
 427 :         Eigen::Matrix<local_scalar_t__,-1,1> multi_probs =
 428 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 429 :         current_statement__ = 46;
 430 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, priorVa));
 431 :         current_statement__ = 47;
 432 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(tau, 0, priorVa));
 433 :         current_statement__ = 48;
 434 :         lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, rho_center,
 435 :                          rho_sd));
 436 :         current_statement__ = 49;
 437 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, priorCo));
 438 :         current_statement__ = 50;
 439 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, priorCo));
 440 :         current_statement__ = 51;
 441 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, priorCo));
 442 :         current_statement__ = 52;
 443 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(eps, 0, 1));
 444 :         current_statement__ = 53;
 445 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta, 0, 1));
 446 :         current_statement__ = 61;
 447 :         for (int i = 1; i <= C; ++i) {
 448 :           current_statement__ = 57;
 449 :           for (int k = 1; k <= K; ++k) {
 450 :             current_statement__ = 54;
 451 :             stan::model::assign(dis,
 452 :               stan::math::sqrt(
 453 :                 (stan::math::square(
 454 :                    (stan::model::rvalue(delta, "delta",
 455 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 456 :                    stan::model::rvalue(trap, "trap",
 457 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 458 :                 +
 459 :                 stan::math::square(
 460 :                   (stan::model::rvalue(delta, "delta",
 461 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 462 :                   stan::model::rvalue(trap, "trap",
 463 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 464 :               "assigning variable dis", stan::model::index_uni(i),
 465 :               stan::model::index_uni(k));
 466 :             current_statement__ = 55;
 467 :             stan::model::assign(lambda,
 468 :               (((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 469 :                      stan::model::index_uni(k)) / (-rho *
 470 :               stan::math::exp((alpha *
 471 :                 stan::model::rvalue(landscape, "landscape",
 472 :                   stan::model::index_uni(k)))))) + (theta *
 473 :               stan::model::rvalue(floral, "floral", stan::model::index_uni(k))))
 474 :               + mu) +
 475 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 476 :                 stan::model::index_uni(i))) +
 477 :               stan::model::rvalue(eps_scale, "eps_scale",
 478 :                 stan::model::index_uni(k))), "assigning variable lambda",
 479 :               stan::model::index_uni(i), stan::model::index_uni(k));
 480 :           }
 481 :           current_statement__ = 58;
 482 :           stan::model::assign(multi_probs,
 483 :             stan::math::softmax(
 484 :               stan::math::transpose(
 485 :                 stan::model::rvalue(lambda, "lambda",
 486 :                   stan::model::index_uni(i), stan::model::index_omni()))),
 487 :             "assigning variable multi_probs");
 488 :           current_statement__ = 59;
 489 :           lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
 490 :                            stan::model::rvalue(y, "y",
 491 :                              stan::model::index_uni(i),
 492 :                              stan::model::index_omni()), multi_probs));
 493 :         }
 494 :       }
 495 :     } catch (const std::exception& e) {
 496 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 497 :     }
 498 :     lp_accum__.add(lp__);
 499 :     return lp_accum__.sum();
 500 :   }
 501 :   template <typename RNG, typename VecR, typename VecI, typename VecVar,
 502 :             stan::require_vector_like_vt<std::is_floating_point,
 503 :             VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
 504 :             VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
 505 :             VecVar>* = nullptr>
 506 :   inline void
 507 :   write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
 508 :                    VecVar& vars__, const bool
 509 :                    emit_transformed_parameters__ = true, const bool
 510 :                    emit_generated_quantities__ = true, std::ostream*
 511 :                    pstream__ = nullptr) const {
 512 :     using local_scalar_t__ = double;
 513 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 514 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 515 :     static constexpr bool propto__ = true;
 516 :     // suppress unused var warning
 517 :     (void) propto__;
 518 :     double lp__ = 0.0;
 519 :     // suppress unused var warning
 520 :     (void) lp__;
 521 :     int current_statement__ = 0;
 522 :     stan::math::accumulator<double> lp_accum__;
 523 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 524 :     // suppress unused var warning
 525 :     (void) DUMMY_VAR__;
 526 :     constexpr bool jacobian__ = false;
 527 :     static constexpr const char* function__ =
 528 :       "model108a5208b6da7__namespace::write_array";
 529 :     // suppress unused var warning
 530 :     (void) function__;
 531 :     try {
 532 :       double rho = std::numeric_limits<double>::quiet_NaN();
 533 :       current_statement__ = 1;
 534 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 535 :               lp__);
 536 :       double sigma = std::numeric_limits<double>::quiet_NaN();
 537 :       current_statement__ = 2;
 538 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 539 :                 jacobian__>(0, lp__);
 540 :       double tau = std::numeric_limits<double>::quiet_NaN();
 541 :       current_statement__ = 3;
 542 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 543 :               lp__);
 544 :       double alpha = std::numeric_limits<double>::quiet_NaN();
 545 :       current_statement__ = 4;
 546 :       alpha = in__.template read<local_scalar_t__>();
 547 :       double theta = std::numeric_limits<double>::quiet_NaN();
 548 :       current_statement__ = 5;
 549 :       theta = in__.template read<local_scalar_t__>();
 550 :       double mu = std::numeric_limits<double>::quiet_NaN();
 551 :       current_statement__ = 6;
 552 :       mu = in__.template read<local_scalar_t__>();
 553 :       Eigen::Matrix<double,-1,1> eps =
 554 :         Eigen::Matrix<double,-1,1>::Constant(K,
 555 :           std::numeric_limits<double>::quiet_NaN());
 556 :       current_statement__ = 7;
 557 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 558 :       Eigen::Matrix<double,-1,1> zeta =
 559 :         Eigen::Matrix<double,-1,1>::Constant(C,
 560 :           std::numeric_limits<double>::quiet_NaN());
 561 :       current_statement__ = 8;
 562 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 563 :       std::vector<Eigen::Matrix<double,-1,1>> delta =
 564 :         std::vector<Eigen::Matrix<double,-1,1>>(C,
 565 :           Eigen::Matrix<double,-1,1>::Constant(2,
 566 :             std::numeric_limits<double>::quiet_NaN()));
 567 :       current_statement__ = 9;
 568 :       delta = in__.template read_constrain_lub<
 569 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 570 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 571 :       double tau_sqrt = std::numeric_limits<double>::quiet_NaN();
 572 :       double sigma_sqrt = std::numeric_limits<double>::quiet_NaN();
 573 :       Eigen::Matrix<double,-1,1> zeta_scale =
 574 :         Eigen::Matrix<double,-1,1>::Constant(C,
 575 :           std::numeric_limits<double>::quiet_NaN());
 576 :       Eigen::Matrix<double,-1,1> eps_scale =
 577 :         Eigen::Matrix<double,-1,1>::Constant(K,
 578 :           std::numeric_limits<double>::quiet_NaN());
 579 :       out__.write(rho);
 580 :       out__.write(sigma);
 581 :       out__.write(tau);
 582 :       out__.write(alpha);
 583 :       out__.write(theta);
 584 :       out__.write(mu);
 585 :       out__.write(eps);
 586 :       out__.write(zeta);
 587 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 588 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 589 :           out__.write(delta[(sym2__ - 1)][(sym1__ - 1)]);
 590 :         }
 591 :       }
 592 :       if (stan::math::logical_negation(
 593 :             (stan::math::primitive_value(emit_transformed_parameters__) ||
 594 :             stan::math::primitive_value(emit_generated_quantities__)))) {
 595 :         return ;
 596 :       }
 597 :       current_statement__ = 10;
 598 :       tau_sqrt = stan::math::sqrt(tau);
 599 :       current_statement__ = 11;
 600 :       sigma_sqrt = stan::math::sqrt(sigma);
 601 :       current_statement__ = 12;
 602 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 603 :         "assigning variable zeta_scale");
 604 :       current_statement__ = 13;
 605 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 606 :         "assigning variable eps_scale");
 607 :       current_statement__ = 10;
 608 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 609 :       current_statement__ = 11;
 610 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 611 :         sigma_sqrt, 0);
 612 :       if (emit_transformed_parameters__) {
 613 :         out__.write(tau_sqrt);
 614 :         out__.write(sigma_sqrt);
 615 :         out__.write(zeta_scale);
 616 :         out__.write(eps_scale);
 617 :       }
 618 :       if (stan::math::logical_negation(emit_generated_quantities__)) {
 619 :         return ;
 620 :       }
 621 :       Eigen::Matrix<double,-1,1> colony_dist =
 622 :         Eigen::Matrix<double,-1,1>::Constant(C,
 623 :           std::numeric_limits<double>::quiet_NaN());
 624 :       current_statement__ = 15;
 625 :       stan::model::assign(colony_dist, stan::math::rep_vector(0, C),
 626 :         "assigning variable colony_dist");
 627 :       {
 628 :         current_statement__ = 16;
 629 :         stan::math::validate_non_negative_index("dis", "C", C);
 630 :         current_statement__ = 17;
 631 :         stan::math::validate_non_negative_index("dis", "K", K);
 632 :         Eigen::Matrix<double,-1,-1> dis =
 633 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 634 :             std::numeric_limits<double>::quiet_NaN());
 635 :         current_statement__ = 19;
 636 :         stan::math::validate_non_negative_index("lambda", "C", C);
 637 :         current_statement__ = 20;
 638 :         stan::math::validate_non_negative_index("lambda", "K", K);
 639 :         Eigen::Matrix<double,-1,-1> lambda =
 640 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 641 :             std::numeric_limits<double>::quiet_NaN());
 642 :         current_statement__ = 22;
 643 :         stan::math::validate_non_negative_index("V", "C", C);
 644 :         Eigen::Matrix<double,-1,1> V =
 645 :           Eigen::Matrix<double,-1,1>::Constant(C,
 646 :             std::numeric_limits<double>::quiet_NaN());
 647 :         double nugget = std::numeric_limits<double>::quiet_NaN();
 648 :         current_statement__ = 24;
 649 :         nugget = 1e-12;
 650 :         current_statement__ = 30;
 651 :         for (int i = 1; i <= C; ++i) {
 652 :           current_statement__ = 28;
 653 :           for (int k = 1; k <= K; ++k) {
 654 :             current_statement__ = 25;
 655 :             stan::model::assign(dis,
 656 :               stan::math::sqrt(
 657 :                 (stan::math::square(
 658 :                    (stan::model::rvalue(delta, "delta",
 659 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 660 :                    stan::model::rvalue(trap, "trap",
 661 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 662 :                 +
 663 :                 stan::math::square(
 664 :                   (stan::model::rvalue(delta, "delta",
 665 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 666 :                   stan::model::rvalue(trap, "trap",
 667 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 668 :               "assigning variable dis", stan::model::index_uni(i),
 669 :               stan::model::index_uni(k));
 670 :             current_statement__ = 26;
 671 :             stan::model::assign(lambda,
 672 :               (((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 673 :                      stan::model::index_uni(k)) / (-rho *
 674 :               stan::math::exp((alpha *
 675 :                 stan::model::rvalue(landscape, "landscape",
 676 :                   stan::model::index_uni(k)))))) + (theta *
 677 :               stan::model::rvalue(floral, "floral", stan::model::index_uni(k))))
 678 :               + mu) +
 679 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 680 :                 stan::model::index_uni(i))) +
 681 :               stan::model::rvalue(eps_scale, "eps_scale",
 682 :                 stan::model::index_uni(k))), "assigning variable lambda",
 683 :               stan::model::index_uni(i), stan::model::index_uni(k));
 684 :           }
 685 :         }
 686 :         current_statement__ = 33;
 687 :         for (int i = 1; i <= C; ++i) {
 688 :           current_statement__ = 31;
 689 :           stan::model::assign(V,
 690 :             stan::math::sum(
 691 :               stan::math::exp(
 692 :                 stan::model::rvalue(lambda, "lambda",
 693 :                   stan::model::index_uni(i), stan::model::index_omni()))),
 694 :             "assigning variable V", stan::model::index_uni(i));
 695 :         }
 696 :         current_statement__ = 36;
 697 :         for (int k = 1; k <= K; ++k) {
 698 :           current_statement__ = 34;
 699 :           stan::model::assign(colony_dist,
 700 :             stan::math::add(stan::model::deep_copy(colony_dist),
 701 :               stan::math::elt_divide(
 702 :                 stan::math::elt_multiply(
 703 :                   stan::model::rvalue(dis, "dis", stan::model::index_omni(),
 704 :                     stan::model::index_uni(k)),
 705 :                   stan::math::exp(
 706 :                     stan::model::rvalue(lambda, "lambda",
 707 :                       stan::model::index_omni(), stan::model::index_uni(k)))),
 708 :                 stan::math::add(V, nugget))),
 709 :             "assigning variable colony_dist");
 710 :         }
 711 :       }
 712 :       out__.write(colony_dist);
 713 :     } catch (const std::exception& e) {
 714 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 715 :     }
 716 :   }
 717 :   template <typename VecVar, typename VecI,
 718 :             stan::require_vector_t<VecVar>* = nullptr,
 719 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 720 :   inline void
 721 :   unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
 722 :                          VecVar& vars__, std::ostream* pstream__ = nullptr) const {
 723 :     using local_scalar_t__ = double;
 724 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 725 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 726 :     int current_statement__ = 0;
 727 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 728 :     // suppress unused var warning
 729 :     (void) DUMMY_VAR__;
 730 :     try {
 731 :       int pos__ = std::numeric_limits<int>::min();
 732 :       pos__ = 1;
 733 :       local_scalar_t__ rho = DUMMY_VAR__;
 734 :       current_statement__ = 1;
 735 :       rho = in__.read<local_scalar_t__>();
 736 :       out__.write_free_lb(0, rho);
 737 :       local_scalar_t__ sigma = DUMMY_VAR__;
 738 :       current_statement__ = 2;
 739 :       sigma = in__.read<local_scalar_t__>();
 740 :       out__.write_free_lb(0, sigma);
 741 :       local_scalar_t__ tau = DUMMY_VAR__;
 742 :       current_statement__ = 3;
 743 :       tau = in__.read<local_scalar_t__>();
 744 :       out__.write_free_lb(0, tau);
 745 :       local_scalar_t__ alpha = DUMMY_VAR__;
 746 :       current_statement__ = 4;
 747 :       alpha = in__.read<local_scalar_t__>();
 748 :       out__.write(alpha);
 749 :       local_scalar_t__ theta = DUMMY_VAR__;
 750 :       current_statement__ = 5;
 751 :       theta = in__.read<local_scalar_t__>();
 752 :       out__.write(theta);
 753 :       local_scalar_t__ mu = DUMMY_VAR__;
 754 :       current_statement__ = 6;
 755 :       mu = in__.read<local_scalar_t__>();
 756 :       out__.write(mu);
 757 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 758 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 759 :       current_statement__ = 7;
 760 :       stan::model::assign(eps,
 761 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
 762 :         "assigning variable eps");
 763 :       out__.write(eps);
 764 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 765 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 766 :       current_statement__ = 8;
 767 :       stan::model::assign(zeta,
 768 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(C),
 769 :         "assigning variable zeta");
 770 :       out__.write(zeta);
 771 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 772 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 773 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 774 :       current_statement__ = 9;
 775 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 776 :         current_statement__ = 9;
 777 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 778 :           current_statement__ = 9;
 779 :           stan::model::assign(delta, in__.read<local_scalar_t__>(),
 780 :             "assigning variable delta", stan::model::index_uni(sym2__),
 781 :             stan::model::index_uni(sym1__));
 782 :         }
 783 :       }
 784 :       out__.write_free_lub(lowerbound, upperbound, delta);
 785 :     } catch (const std::exception& e) {
 786 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 787 :     }
 788 :   }
 789 :   template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
 790 :   inline void
 791 :   transform_inits_impl(const stan::io::var_context& context__, VecVar&
 792 :                        vars__, std::ostream* pstream__ = nullptr) const {
 793 :     using local_scalar_t__ = double;
 794 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 795 :     int current_statement__ = 0;
 796 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 797 :     // suppress unused var warning
 798 :     (void) DUMMY_VAR__;
 799 :     try {
 800 :       current_statement__ = 1;
 801 :       context__.validate_dims("parameter initialization", "rho", "double",
 802 :         std::vector<size_t>{});
 803 :       current_statement__ = 2;
 804 :       context__.validate_dims("parameter initialization", "sigma", "double",
 805 :         std::vector<size_t>{});
 806 :       current_statement__ = 3;
 807 :       context__.validate_dims("parameter initialization", "tau", "double",
 808 :         std::vector<size_t>{});
 809 :       current_statement__ = 4;
 810 :       context__.validate_dims("parameter initialization", "alpha", "double",
 811 :         std::vector<size_t>{});
 812 :       current_statement__ = 5;
 813 :       context__.validate_dims("parameter initialization", "theta", "double",
 814 :         std::vector<size_t>{});
 815 :       current_statement__ = 6;
 816 :       context__.validate_dims("parameter initialization", "mu", "double",
 817 :         std::vector<size_t>{});
 818 :       current_statement__ = 7;
 819 :       context__.validate_dims("parameter initialization", "eps", "double",
 820 :         std::vector<size_t>{static_cast<size_t>(K)});
 821 :       current_statement__ = 8;
 822 :       context__.validate_dims("parameter initialization", "zeta", "double",
 823 :         std::vector<size_t>{static_cast<size_t>(C)});
 824 :       current_statement__ = 9;
 825 :       context__.validate_dims("parameter initialization", "delta", "double",
 826 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(2)});
 827 :       int pos__ = std::numeric_limits<int>::min();
 828 :       pos__ = 1;
 829 :       local_scalar_t__ rho = DUMMY_VAR__;
 830 :       current_statement__ = 1;
 831 :       rho = context__.vals_r("rho")[(1 - 1)];
 832 :       out__.write_free_lb(0, rho);
 833 :       local_scalar_t__ sigma = DUMMY_VAR__;
 834 :       current_statement__ = 2;
 835 :       sigma = context__.vals_r("sigma")[(1 - 1)];
 836 :       out__.write_free_lb(0, sigma);
 837 :       local_scalar_t__ tau = DUMMY_VAR__;
 838 :       current_statement__ = 3;
 839 :       tau = context__.vals_r("tau")[(1 - 1)];
 840 :       out__.write_free_lb(0, tau);
 841 :       local_scalar_t__ alpha = DUMMY_VAR__;
 842 :       current_statement__ = 4;
 843 :       alpha = context__.vals_r("alpha")[(1 - 1)];
 844 :       out__.write(alpha);
 845 :       local_scalar_t__ theta = DUMMY_VAR__;
 846 :       current_statement__ = 5;
 847 :       theta = context__.vals_r("theta")[(1 - 1)];
 848 :       out__.write(theta);
 849 :       local_scalar_t__ mu = DUMMY_VAR__;
 850 :       current_statement__ = 6;
 851 :       mu = context__.vals_r("mu")[(1 - 1)];
 852 :       out__.write(mu);
 853 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 854 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 855 :       {
 856 :         std::vector<local_scalar_t__> eps_flat__;
 857 :         current_statement__ = 7;
 858 :         eps_flat__ = context__.vals_r("eps");
 859 :         current_statement__ = 7;
 860 :         pos__ = 1;
 861 :         current_statement__ = 7;
 862 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 863 :           current_statement__ = 7;
 864 :           stan::model::assign(eps, eps_flat__[(pos__ - 1)],
 865 :             "assigning variable eps", stan::model::index_uni(sym1__));
 866 :           current_statement__ = 7;
 867 :           pos__ = (pos__ + 1);
 868 :         }
 869 :       }
 870 :       out__.write(eps);
 871 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 872 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 873 :       {
 874 :         std::vector<local_scalar_t__> zeta_flat__;
 875 :         current_statement__ = 8;
 876 :         zeta_flat__ = context__.vals_r("zeta");
 877 :         current_statement__ = 8;
 878 :         pos__ = 1;
 879 :         current_statement__ = 8;
 880 :         for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 881 :           current_statement__ = 8;
 882 :           stan::model::assign(zeta, zeta_flat__[(pos__ - 1)],
 883 :             "assigning variable zeta", stan::model::index_uni(sym1__));
 884 :           current_statement__ = 8;
 885 :           pos__ = (pos__ + 1);
 886 :         }
 887 :       }
 888 :       out__.write(zeta);
 889 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 890 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 891 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 892 :       {
 893 :         std::vector<local_scalar_t__> delta_flat__;
 894 :         current_statement__ = 9;
 895 :         delta_flat__ = context__.vals_r("delta");
 896 :         current_statement__ = 9;
 897 :         pos__ = 1;
 898 :         current_statement__ = 9;
 899 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 900 :           current_statement__ = 9;
 901 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 902 :             current_statement__ = 9;
 903 :             stan::model::assign(delta, delta_flat__[(pos__ - 1)],
 904 :               "assigning variable delta", stan::model::index_uni(sym2__),
 905 :               stan::model::index_uni(sym1__));
 906 :             current_statement__ = 9;
 907 :             pos__ = (pos__ + 1);
 908 :           }
 909 :         }
 910 :       }
 911 :       out__.write_free_lub(lowerbound, upperbound, delta);
 912 :     } catch (const std::exception& e) {
 913 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 914 :     }
 915 :   }
 916 :   inline void
 917 :   get_param_names(std::vector<std::string>& names__, const bool
 918 :                   emit_transformed_parameters__ = true, const bool
 919 :                   emit_generated_quantities__ = true) const {
 920 :     names__ = std::vector<std::string>{"rho", "sigma", "tau", "alpha",
 921 :                 "theta", "mu", "eps", "zeta", "delta"};
 922 :     if (emit_transformed_parameters__) {
 923 :       std::vector<std::string>
 924 :         temp{"tau_sqrt", "sigma_sqrt", "zeta_scale", "eps_scale"};
 925 :       names__.reserve(names__.size() + temp.size());
 926 :       names__.insert(names__.end(), temp.begin(), temp.end());
 927 :     }
 928 :     if (emit_generated_quantities__) {
 929 :       std::vector<std::string> temp{"colony_dist"};
 930 :       names__.reserve(names__.size() + temp.size());
 931 :       names__.insert(names__.end(), temp.begin(), temp.end());
 932 :     }
 933 :   }
 934 :   inline void
 935 :   get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
 936 :            emit_transformed_parameters__ = true, const bool
 937 :            emit_generated_quantities__ = true) const {
 938 :     dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
 939 :                 std::vector<size_t>{}, std::vector<size_t>{},
 940 :                 std::vector<size_t>{}, std::vector<size_t>{},
 941 :                 std::vector<size_t>{},
 942 :                 std::vector<size_t>{static_cast<size_t>(K)},
 943 :                 std::vector<size_t>{static_cast<size_t>(C)},
 944 :                 std::vector<size_t>{static_cast<size_t>(C),
 945 :                   static_cast<size_t>(2)}};
 946 :     if (emit_transformed_parameters__) {
 947 :       std::vector<std::vector<size_t>>
 948 :         temp{std::vector<size_t>{}, std::vector<size_t>{},
 949 :              std::vector<size_t>{static_cast<size_t>(C)},
 950 :              std::vector<size_t>{static_cast<size_t>(K)}};
 951 :       dimss__.reserve(dimss__.size() + temp.size());
 952 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 953 :     }
 954 :     if (emit_generated_quantities__) {
 955 :       std::vector<std::vector<size_t>>
 956 :         temp{std::vector<size_t>{static_cast<size_t>(C)}};
 957 :       dimss__.reserve(dimss__.size() + temp.size());
 958 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 959 :     }
 960 :   }
 961 :   inline void
 962 :   constrained_param_names(std::vector<std::string>& param_names__, bool
 963 :                           emit_transformed_parameters__ = true, bool
 964 :                           emit_generated_quantities__ = true) const final {
 965 :     param_names__.emplace_back(std::string() + "rho");
 966 :     param_names__.emplace_back(std::string() + "sigma");
 967 :     param_names__.emplace_back(std::string() + "tau");
 968 :     param_names__.emplace_back(std::string() + "alpha");
 969 :     param_names__.emplace_back(std::string() + "theta");
 970 :     param_names__.emplace_back(std::string() + "mu");
 971 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 972 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 973 :         std::to_string(sym1__));
 974 :     }
 975 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 976 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 977 :         std::to_string(sym1__));
 978 :     }
 979 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 980 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 981 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 982 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 983 :       }
 984 :     }
 985 :     if (emit_transformed_parameters__) {
 986 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 987 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 988 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 989 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 990 :           std::to_string(sym1__));
 991 :       }
 992 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 993 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 994 :           std::to_string(sym1__));
 995 :       }
 996 :     }
 997 :     if (emit_generated_quantities__) {
 998 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 999 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
1000 :           std::to_string(sym1__));
1001 :       }
1002 :     }
1003 :   }
1004 :   inline void
1005 :   unconstrained_param_names(std::vector<std::string>& param_names__, bool
1006 :                             emit_transformed_parameters__ = true, bool
1007 :                             emit_generated_quantities__ = true) const final {
1008 :     param_names__.emplace_back(std::string() + "rho");
1009 :     param_names__.emplace_back(std::string() + "sigma");
1010 :     param_names__.emplace_back(std::string() + "tau");
1011 :     param_names__.emplace_back(std::string() + "alpha");
1012 :     param_names__.emplace_back(std::string() + "theta");
1013 :     param_names__.emplace_back(std::string() + "mu");
1014 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
1015 :       param_names__.emplace_back(std::string() + "eps" + '.' +
1016 :         std::to_string(sym1__));
1017 :     }
1018 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1019 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
1020 :         std::to_string(sym1__));
1021 :     }
1022 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
1023 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
1024 :         param_names__.emplace_back(std::string() + "delta" + '.' +
1025 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
1026 :       }
1027 :     }
1028 :     if (emit_transformed_parameters__) {
1029 :       param_names__.emplace_back(std::string() + "tau_sqrt");
1030 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
1031 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1032 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
1033 :           std::to_string(sym1__));
1034 :       }
1035 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
1036 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
1037 :           std::to_string(sym1__));
1038 :       }
1039 :     }
1040 :     if (emit_generated_quantities__) {
1041 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1042 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
1043 :           std::to_string(sym1__));
1044 :       }
1045 :     }
1046 :   }
1047 :   inline std::string get_constrained_sizedtypes() const {
1048 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
1049 :   }
1050 :   inline std::string get_unconstrained_sizedtypes() const {
1051 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
1052 :   }
1053 :   // Begin method overload boilerplate
1054 :   template <typename RNG> inline void
1055 :   write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
1056 :               Eigen::Matrix<double,-1,1>& vars, const bool
1057 :               emit_transformed_parameters = true, const bool
1058 :               emit_generated_quantities = true, std::ostream*
1059 :               pstream = nullptr) const {
1060 :     const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + 1) + 1) + K) + C)
1061 :       + (C * 2));
1062 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1063 :       C) + K));
1064 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1065 :     const size_t num_to_write = num_params__ + num_transformed +
1066 :       num_gen_quantities;
1067 :     std::vector<int> params_i;
1068 :     vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
1069 :              std::numeric_limits<double>::quiet_NaN());
1070 :     write_array_impl(base_rng, params_r, params_i, vars,
1071 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1072 :   }
1073 :   template <typename RNG> inline void
1074 :   write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
1075 :               params_i, std::vector<double>& vars, bool
1076 :               emit_transformed_parameters = true, bool
1077 :               emit_generated_quantities = true, std::ostream*
1078 :               pstream = nullptr) const {
1079 :     const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + 1) + 1) + K) + C)
1080 :       + (C * 2));
1081 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1082 :       C) + K));
1083 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1084 :     const size_t num_to_write = num_params__ + num_transformed +
1085 :       num_gen_quantities;
1086 :     vars = std::vector<double>(num_to_write,
1087 :              std::numeric_limits<double>::quiet_NaN());
1088 :     write_array_impl(base_rng, params_r, params_i, vars,
1089 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1090 :   }
1091 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1092 :   log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
1093 :     Eigen::Matrix<int,-1,1> params_i;
1094 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1095 :   }
1096 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1097 :   log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
1098 :            std::ostream* pstream = nullptr) const {
1099 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1100 :   }
1101 :   inline void
1102 :   transform_inits(const stan::io::var_context& context,
1103 :                   Eigen::Matrix<double,-1,1>& params_r, std::ostream*
1104 :                   pstream = nullptr) const final {
1105 :     std::vector<double> params_r_vec(params_r.size());
1106 :     std::vector<int> params_i;
1107 :     transform_inits(context, params_i, params_r_vec, pstream);
1108 :     params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
1109 :                  params_r_vec.size());
1110 :   }
1111 :   inline void
1112 :   transform_inits(const stan::io::var_context& context, std::vector<int>&
1113 :                   params_i, std::vector<double>& vars, std::ostream*
1114 :                   pstream__ = nullptr) const {
1115 :     vars.resize(num_params_r__);
1116 :     transform_inits_impl(context, vars, pstream__);
1117 :   }
1118 :   inline void
1119 :   unconstrain_array(const std::vector<double>& params_constrained,
1120 :                     std::vector<double>& params_unconstrained, std::ostream*
1121 :                     pstream = nullptr) const {
1122 :     const std::vector<int> params_i;
1123 :     params_unconstrained = std::vector<double>(num_params_r__,
1124 :                              std::numeric_limits<double>::quiet_NaN());
1125 :     unconstrain_array_impl(params_constrained, params_i,
1126 :       params_unconstrained, pstream);
1127 :   }
1128 :   inline void
1129 :   unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
1130 :                     Eigen::Matrix<double,-1,1>& params_unconstrained,
1131 :                     std::ostream* pstream = nullptr) const {
1132 :     const std::vector<int> params_i;
1133 :     params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
1134 :                              std::numeric_limits<double>::quiet_NaN());
1135 :     unconstrain_array_impl(params_constrained, params_i,
1136 :       params_unconstrained, pstream);
1137 :   }
1138 : };
1139 : }
1140 : using stan_model = model108a5208b6da7__namespace::model108a5208b6da7_;
1141 : #ifndef USING_R
1142 : // Boilerplate
1143 : stan::model::model_base&
1144 : new_model(stan::io::var_context& data_context, unsigned int seed,
1145 :           std::ostream* msg_stream) {
1146 :   stan_model* m = new stan_model(data_context, seed, msg_stream);
1147 :   return *m;
1148 : }
1149 : stan::math::profile_map& get_stan_profile_data() {
1150 :   return model108a5208b6da7__namespace::profiles__;
1151 : }
1152 : #endif
1153 : #endif
1154 : 
1155 : RCPP_MODULE(stan_fit4model108a5208b6da7__mod) {
1156 :   class_<rstan::stan_fit<stan_model, boost::random::ecuyer1988> >(
1157 :       "stan_fit4model108a5208b6da7_")
1158 : 
1159 :       .constructor<SEXP, SEXP, SEXP>()
1160 : 
1161 :       .method(
1162 :           "call_sampler",
1163 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::call_sampler)
1164 :       .method(
1165 :           "param_names",
1166 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_names)
1167 :       .method("param_names_oi",
1168 :               &rstan::stan_fit<stan_model,
1169 :                                boost::random::ecuyer1988>::param_names_oi)
1170 :       .method("param_fnames_oi",
1171 :               &rstan::stan_fit<stan_model,
1172 :                                boost::random::ecuyer1988>::param_fnames_oi)
1173 :       .method(
1174 :           "param_dims",
1175 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_dims)
1176 :       .method("param_dims_oi",
1177 :               &rstan::stan_fit<stan_model,
1178 :                                boost::random::ecuyer1988>::param_dims_oi)
1179 :       .method("update_param_oi",
1180 :               &rstan::stan_fit<stan_model,
1181 :                                boost::random::ecuyer1988>::update_param_oi)
1182 :       .method("param_oi_tidx",
1183 :               &rstan::stan_fit<stan_model,
1184 :                                boost::random::ecuyer1988>::param_oi_tidx)
1185 :       .method("grad_log_prob",
1186 :               &rstan::stan_fit<stan_model,
1187 :                                boost::random::ecuyer1988>::grad_log_prob)
1188 :       .method("log_prob",
1189 :               &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::log_prob)
1190 :       .method("unconstrain_pars",
1191 :               &rstan::stan_fit<stan_model,
1192 :                                boost::random::ecuyer1988>::unconstrain_pars)
1193 :       .method("constrain_pars",
1194 :               &rstan::stan_fit<stan_model,
1195 :                                boost::random::ecuyer1988>::constrain_pars)
1196 :       .method(
1197 :           "num_pars_unconstrained",
1198 :           &rstan::stan_fit<stan_model,
1199 :                            boost::random::ecuyer1988>::num_pars_unconstrained)
1200 :       .method(
1201 :           "unconstrained_param_names",
1202 :           &rstan::stan_fit<
1203 :               stan_model, boost::random::ecuyer1988>::unconstrained_param_names)
1204 :       .method(
1205 :           "constrained_param_names",
1206 :           &rstan::stan_fit<stan_model,
1207 :                            boost::random::ecuyer1988>::constrained_param_names)
1208 :       .method("standalone_gqs",
1209 :               &rstan::stan_fit<stan_model,
1210 :                                boost::random::ecuyer1988>::standalone_gqs);
1211 : }
1212 : 
1213 : 
1214 : // declarations
1215 : extern "C" {
1216 : SEXP file108a51989d48d( ) ;
1217 : }
1218 : 
1219 : // definition
1220 : SEXP file108a51989d48d() {
1221 :  return Rcpp::wrap("anon_model");
1222 : }
make cmd is
  make -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/etc/Makeconf' -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/share/make/shlib.mk' -f '/home/melanson/.R/Makevars' CXX='$(CXX17) $(CXX17STD)' CXXFLAGS='$(CXX17FLAGS)' CXXPICFLAGS='$(CXX17PICFLAGS)' SHLIB_LDFLAGS='$(SHLIB_CXX17LDFLAGS)' SHLIB_LD='$(SHLIB_CXX17LD)' SHLIB='file108a51989d48d.so' OBJECTS='file108a51989d48d.o'

make would use
g++ -std=gnu++17 -I"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/include" -DNDEBUG   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/java/17.0.6/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include/flexiblas    -fpic  -O2 -ftree-vectorize -march=x86-64-v3 -fno-math-errno  -c file108a51989d48d.cpp -o file108a51989d48d.o
if test  "zfile108a51989d48d.o" != "z"; then \
  echo g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file108a51989d48d.so file108a51989d48d.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
  g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file108a51989d48d.so file108a51989d48d.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
fi

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).

SAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).
Chain 1: 
Chain 1: Gradient evaluation took 0.018646 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 186.46 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: Rejecting initial value:
Chain 2:   Gradient evaluated at the initial value is not finite.
Chain 2:   Stan can't start sampling from this initial value.
Chain 2: 
Chain 2: Gradient evaluation took 0.011257 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 112.57 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Log probability evaluates to log(0), i.e. negative infinity.
Chain 3:   Stan can't start sampling from this initial value.
Chain 4: Rejecting initial value:
Chain 4:   Gradient evaluated at the initial value is not finite.
Chain 4:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Log probability evaluates to log(0), i.e. negative infinity.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Log probability evaluates to log(0), i.e. negative infinity.
Chain 3:   Stan can't start sampling from this initial value.
Chain 4: Rejecting initial value:
Chain 4:   Gradient evaluated at the initial value is not finite.
Chain 4:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Log probability evaluates to log(0), i.e. negative infinity.
Chain 3:   Stan can't start sampling from this initial value.
Chain 4: 
Chain 4: Gradient evaluation took 0.010356 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 103.56 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: Rejecting initial value:
Chain 3:   Gradient evaluated at the initial value is not finite.
Chain 3:   Stan can't start sampling from this initial value.
Chain 3: 
Chain 3: Gradient evaluation took 0.010371 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 103.71 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 1: Iteration:    1 / 6000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 6000 [  0%]  (Warmup)
Chain 4: Iteration:    1 / 6000 [  0%]  (Warmup)
Chain 3: Iteration:    1 / 6000 [  0%]  (Warmup)
Chain 2: Iteration:  600 / 6000 [ 10%]  (Warmup)
Chain 4: Iteration:  600 / 6000 [ 10%]  (Warmup)
Chain 3: Iteration:  600 / 6000 [ 10%]  (Warmup)
Chain 1: Iteration:  600 / 6000 [ 10%]  (Warmup)
Chain 2: Iteration: 1001 / 6000 [ 16%]  (Sampling)
Chain 4: Iteration: 1001 / 6000 [ 16%]  (Sampling)
Chain 3: Iteration: 1001 / 6000 [ 16%]  (Sampling)
Chain 1: Iteration: 1001 / 6000 [ 16%]  (Sampling)
Chain 2: Iteration: 1600 / 6000 [ 26%]  (Sampling)
Chain 4: Iteration: 1600 / 6000 [ 26%]  (Sampling)
Chain 3: Iteration: 1600 / 6000 [ 26%]  (Sampling)
Chain 2: Iteration: 2200 / 6000 [ 36%]  (Sampling)
Chain 4: Iteration: 2200 / 6000 [ 36%]  (Sampling)
Chain 3: Iteration: 2200 / 6000 [ 36%]  (Sampling)
Chain 1: Iteration: 1600 / 6000 [ 26%]  (Sampling)
Chain 2: Iteration: 2800 / 6000 [ 46%]  (Sampling)
Chain 4: Iteration: 2800 / 6000 [ 46%]  (Sampling)
Chain 3: Iteration: 2800 / 6000 [ 46%]  (Sampling)
Chain 2: Iteration: 3400 / 6000 [ 56%]  (Sampling)
Chain 4: Iteration: 3400 / 6000 [ 56%]  (Sampling)
Chain 3: Iteration: 3400 / 6000 [ 56%]  (Sampling)
Chain 1: Iteration: 2200 / 6000 [ 36%]  (Sampling)
Chain 2: Iteration: 4000 / 6000 [ 66%]  (Sampling)
Chain 4: Iteration: 4000 / 6000 [ 66%]  (Sampling)
Chain 3: Iteration: 4000 / 6000 [ 66%]  (Sampling)
Chain 2: Iteration: 4600 / 6000 [ 76%]  (Sampling)
Chain 4: Iteration: 4600 / 6000 [ 76%]  (Sampling)
Chain 3: Iteration: 4600 / 6000 [ 76%]  (Sampling)
Chain 1: Iteration: 2800 / 6000 [ 46%]  (Sampling)
Chain 2: Iteration: 5200 / 6000 [ 86%]  (Sampling)
Chain 4: Iteration: 5200 / 6000 [ 86%]  (Sampling)
Chain 3: Iteration: 5200 / 6000 [ 86%]  (Sampling)
Chain 2: Iteration: 5800 / 6000 [ 96%]  (Sampling)
Chain 4: Iteration: 5800 / 6000 [ 96%]  (Sampling)
Chain 3: Iteration: 5800 / 6000 [ 96%]  (Sampling)
Chain 2: Iteration: 6000 / 6000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 2170.41 seconds (Warm-up)
Chain 2:                7176.87 seconds (Sampling)
Chain 2:                9347.28 seconds (Total)
Chain 2: 
Chain 4: Iteration: 6000 / 6000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 2285.12 seconds (Warm-up)
Chain 4:                7139.44 seconds (Sampling)
Chain 4:                9424.56 seconds (Total)
Chain 4: 
Chain 3: Iteration: 6000 / 6000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 2333.92 seconds (Warm-up)
Chain 3:                7126.69 seconds (Sampling)
Chain 3:                9460.61 seconds (Total)
Chain 3: 
Chain 1: Iteration: 3400 / 6000 [ 56%]  (Sampling)
Chain 1: Iteration: 4000 / 6000 [ 66%]  (Sampling)
Chain 1: Iteration: 4600 / 6000 [ 76%]  (Sampling)
Chain 1: Iteration: 5200 / 6000 [ 86%]  (Sampling)
Chain 1: Iteration: 5800 / 6000 [ 96%]  (Sampling)
Chain 1: Iteration: 6000 / 6000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 2771.4 seconds (Warm-up)
Chain 1:                14482.8 seconds (Sampling)
Chain 1:                17254.2 seconds (Total)
Chain 1: 
[1] "Model complete."
[1] "Model saved."
