[1] "Loading landscape metric raster."

TRANSLATING MODEL '' FROM Stan CODE TO C++ CODE NOW.
OS: x86_64, linux-gnu; rstan: 2.32.7; Rcpp: 1.0.14; inline: 0.3.21 
 >> setting environment variables: 
PKG_LIBS =  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb 
PKG_CPPFLAGS =   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1 
 >> Program source :

   1 : 
   2 : // includes from the plugin
   3 : // [[Rcpp::plugins(cpp14)]]
   4 : 
   5 : 
   6 : // user includes
   7 : #include <Rcpp.h>
   8 : using namespace Rcpp;
   9 : #ifndef MODELS_HPP
  10 : #define MODELS_HPP
  11 : #define STAN__SERVICES__COMMAND_HPP
  12 : #include <rstan/rstaninc.hpp>
  13 : #ifndef USE_STANC3
  14 : #define USE_STANC3
  15 : #endif
  16 : // Code generated by stanc v2.32.2
  17 : #include <stan/model/model_header.hpp>
  18 : namespace model35a7d147f866e__namespace {
  19 : using stan::model::model_base_crtp;
  20 : using namespace stan::math;
  21 : stan::math::profile_map profiles__;
  22 : static constexpr std::array<const char*, 82> locations_array__ =
  23 :   {" (found before start of program)",
  24 :   " (in 'anon_model', line 19, column 0 to column 18)",
  25 :   " (in 'anon_model', line 20, column 0 to column 20)",
  26 :   " (in 'anon_model', line 21, column 0 to column 18)",
  27 :   " (in 'anon_model', line 22, column 0 to column 11)",
  28 :   " (in 'anon_model', line 23, column 0 to column 11)",
  29 :   " (in 'anon_model', line 24, column 0 to column 8)",
  30 :   " (in 'anon_model', line 25, column 0 to column 14)",
  31 :   " (in 'anon_model', line 26, column 0 to column 15)",
  32 :   " (in 'anon_model', line 27, column 0 to column 62)",
  33 :   " (in 'anon_model', line 30, column 2 to column 37)",
  34 :   " (in 'anon_model', line 31, column 2 to column 41)",
  35 :   " (in 'anon_model', line 32, column 2 to column 41)",
  36 :   " (in 'anon_model', line 33, column 2 to column 39)",
  37 :   " (in 'anon_model', line 62, column 2 to column 24)",
  38 :   " (in 'anon_model', line 63, column 2 to column 33)",
  39 :   " (in 'anon_model', line 67, column 11 to column 12)",
  40 :   " (in 'anon_model', line 67, column 13 to column 14)",
  41 :   " (in 'anon_model', line 67, column 4 to column 20)",
  42 :   " (in 'anon_model', line 68, column 11 to column 12)",
  43 :   " (in 'anon_model', line 68, column 13 to column 14)",
  44 :   " (in 'anon_model', line 68, column 4 to column 23)",
  45 :   " (in 'anon_model', line 69, column 11 to column 12)",
  46 :   " (in 'anon_model', line 69, column 4 to column 16)",
  47 :   " (in 'anon_model', line 70, column 4 to column 24)",
  48 :   " (in 'anon_model', line 75, column 8 to column 92)",
  49 :   " (in 'anon_model', line 76, column 8 to column 117)",
  50 :   " (in 'anon_model', line 74, column 19 to line 77, column 7)",
  51 :   " (in 'anon_model', line 74, column 6 to line 77, column 7)",
  52 :   " (in 'anon_model', line 73, column 17 to line 78, column 5)",
  53 :   " (in 'anon_model', line 73, column 4 to line 78, column 5)",
  54 :   " (in 'anon_model', line 82, column 6 to column 34)",
  55 :   " (in 'anon_model', line 81, column 18 to line 83, column 5)",
  56 :   " (in 'anon_model', line 81, column 4 to line 83, column 5)",
  57 :   " (in 'anon_model', line 88, column 6 to column 79)",
  58 :   " (in 'anon_model', line 87, column 18 to line 89, column 5)",
  59 :   " (in 'anon_model', line 87, column 4 to line 89, column 5)",
  60 :   " (in 'anon_model', line 66, column 2 to line 90, column 3)",
  61 :   " (in 'anon_model', line 40, column 7 to column 8)",
  62 :   " (in 'anon_model', line 40, column 9 to column 10)",
  63 :   " (in 'anon_model', line 40, column 0 to column 16)",
  64 :   " (in 'anon_model', line 41, column 7 to column 8)",
  65 :   " (in 'anon_model', line 41, column 9 to column 10)",
  66 :   " (in 'anon_model', line 41, column 0 to column 19)",
  67 :   " (in 'anon_model', line 43, column 0 to column 27)",
  68 :   " (in 'anon_model', line 44, column 0 to column 25)",
  69 :   " (in 'anon_model', line 45, column 0 to column 36)",
  70 :   " (in 'anon_model', line 46, column 0 to column 24)",
  71 :   " (in 'anon_model', line 47, column 0 to column 27)",
  72 :   " (in 'anon_model', line 48, column 0 to column 27)",
  73 :   " (in 'anon_model', line 50, column 0 to column 19)",
  74 :   " (in 'anon_model', line 51, column 0 to column 20)",
  75 :   " (in 'anon_model', line 55, column 4 to column 88)",
  76 :   " (in 'anon_model', line 56, column 4 to column 113)",
  77 :   " (in 'anon_model', line 57, column 4 to column 40)",
  78 :   " (in 'anon_model', line 54, column 15 to line 58, column 3)",
  79 :   " (in 'anon_model', line 54, column 2 to line 58, column 3)",
  80 :   " (in 'anon_model', line 53, column 13 to line 59, column 1)",
  81 :   " (in 'anon_model', line 53, column 0 to line 59, column 1)",
  82 :   " (in 'anon_model', line 5, column 0 to column 15)",
  83 :   " (in 'anon_model', line 6, column 0 to column 15)",
  84 :   " (in 'anon_model', line 7, column 7 to column 8)",
  85 :   " (in 'anon_model', line 7, column 0 to column 18)",
  86 :   " (in 'anon_model', line 8, column 6 to column 7)",
  87 :   " (in 'anon_model', line 8, column 9 to column 10)",
  88 :   " (in 'anon_model', line 8, column 0 to column 12)",
  89 :   " (in 'anon_model', line 9, column 0 to column 16)",
  90 :   " (in 'anon_model', line 10, column 0 to column 16)",
  91 :   " (in 'anon_model', line 11, column 7 to column 8)",
  92 :   " (in 'anon_model', line 11, column 0 to column 17)",
  93 :   " (in 'anon_model', line 12, column 7 to column 8)",
  94 :   " (in 'anon_model', line 12, column 0 to column 20)",
  95 :   " (in 'anon_model', line 13, column 0 to column 25)",
  96 :   " (in 'anon_model', line 14, column 0 to column 21)",
  97 :   " (in 'anon_model', line 15, column 0 to column 22)",
  98 :   " (in 'anon_model', line 16, column 0 to column 22)",
  99 :   " (in 'anon_model', line 25, column 7 to column 8)",
 100 :   " (in 'anon_model', line 26, column 7 to column 8)",
 101 :   " (in 'anon_model', line 27, column 7 to column 8)",
 102 :   " (in 'anon_model', line 32, column 9 to column 10)",
 103 :   " (in 'anon_model', line 33, column 9 to column 10)",
 104 :   " (in 'anon_model', line 62, column 9 to column 10)"};
 105 : class model35a7d147f866e_ final : public model_base_crtp<model35a7d147f866e_> {
 106 : private:
 107 :   int C;
 108 :   int K;
 109 :   Eigen::Matrix<double,-1,-1> trap_data__;
 110 :   std::vector<std::vector<int>> y;
 111 :   double lowerbound;
 112 :   double upperbound;
 113 :   Eigen::Matrix<double,-1,1> floral_data__;
 114 :   Eigen::Matrix<double,-1,1> landscape_data__;
 115 :   double rho_center;
 116 :   double rho_sd;
 117 :   double priorVa;
 118 :   double priorCo;
 119 :   Eigen::Map<Eigen::Matrix<double,-1,-1>> trap{nullptr, 0, 0};
 120 :   Eigen::Map<Eigen::Matrix<double,-1,1>> floral{nullptr, 0};
 121 :   Eigen::Map<Eigen::Matrix<double,-1,1>> landscape{nullptr, 0};
 122 : public:
 123 :   ~model35a7d147f866e_() {}
 124 :   model35a7d147f866e_(stan::io::var_context& context__, unsigned int
 125 :                       random_seed__ = 0, std::ostream* pstream__ = nullptr)
 126 :       : model_base_crtp(0) {
 127 :     int current_statement__ = 0;
 128 :     using local_scalar_t__ = double;
 129 :     boost::ecuyer1988 base_rng__ =
 130 :       stan::services::util::create_rng(random_seed__, 0);
 131 :     // suppress unused var warning
 132 :     (void) base_rng__;
 133 :     static constexpr const char* function__ =
 134 :       "model35a7d147f866e__namespace::model35a7d147f866e_";
 135 :     // suppress unused var warning
 136 :     (void) function__;
 137 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 138 :     // suppress unused var warning
 139 :     (void) DUMMY_VAR__;
 140 :     try {
 141 :       int pos__ = std::numeric_limits<int>::min();
 142 :       pos__ = 1;
 143 :       current_statement__ = 59;
 144 :       context__.validate_dims("data initialization", "C", "int",
 145 :         std::vector<size_t>{});
 146 :       C = std::numeric_limits<int>::min();
 147 :       current_statement__ = 59;
 148 :       C = context__.vals_i("C")[(1 - 1)];
 149 :       current_statement__ = 59;
 150 :       stan::math::check_greater_or_equal(function__, "C", C, 1);
 151 :       current_statement__ = 60;
 152 :       context__.validate_dims("data initialization", "K", "int",
 153 :         std::vector<size_t>{});
 154 :       K = std::numeric_limits<int>::min();
 155 :       current_statement__ = 60;
 156 :       K = context__.vals_i("K")[(1 - 1)];
 157 :       current_statement__ = 60;
 158 :       stan::math::check_greater_or_equal(function__, "K", K, 1);
 159 :       current_statement__ = 61;
 160 :       stan::math::validate_non_negative_index("trap", "K", K);
 161 :       current_statement__ = 62;
 162 :       context__.validate_dims("data initialization", "trap", "double",
 163 :         std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(2)});
 164 :       trap_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, 2,
 165 :                       std::numeric_limits<double>::quiet_NaN());
 166 :       new (&trap) Eigen::Map<Eigen::Matrix<double,-1,-1>>(trap_data__.data(),
 167 :         K, 2);
 168 :       {
 169 :         std::vector<local_scalar_t__> trap_flat__;
 170 :         current_statement__ = 62;
 171 :         trap_flat__ = context__.vals_r("trap");
 172 :         current_statement__ = 62;
 173 :         pos__ = 1;
 174 :         current_statement__ = 62;
 175 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 176 :           current_statement__ = 62;
 177 :           for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
 178 :             current_statement__ = 62;
 179 :             stan::model::assign(trap, trap_flat__[(pos__ - 1)],
 180 :               "assigning variable trap", stan::model::index_uni(sym2__),
 181 :               stan::model::index_uni(sym1__));
 182 :             current_statement__ = 62;
 183 :             pos__ = (pos__ + 1);
 184 :           }
 185 :         }
 186 :       }
 187 :       current_statement__ = 63;
 188 :       stan::math::validate_non_negative_index("y", "C", C);
 189 :       current_statement__ = 64;
 190 :       stan::math::validate_non_negative_index("y", "K", K);
 191 :       current_statement__ = 65;
 192 :       context__.validate_dims("data initialization", "y", "int",
 193 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(K)});
 194 :       y = std::vector<std::vector<int>>(C,
 195 :             std::vector<int>(K, std::numeric_limits<int>::min()));
 196 :       {
 197 :         std::vector<int> y_flat__;
 198 :         current_statement__ = 65;
 199 :         y_flat__ = context__.vals_i("y");
 200 :         current_statement__ = 65;
 201 :         pos__ = 1;
 202 :         current_statement__ = 65;
 203 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 204 :           current_statement__ = 65;
 205 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 206 :             current_statement__ = 65;
 207 :             stan::model::assign(y, y_flat__[(pos__ - 1)],
 208 :               "assigning variable y", stan::model::index_uni(sym2__),
 209 :               stan::model::index_uni(sym1__));
 210 :             current_statement__ = 65;
 211 :             pos__ = (pos__ + 1);
 212 :           }
 213 :         }
 214 :       }
 215 :       current_statement__ = 66;
 216 :       context__.validate_dims("data initialization", "lowerbound", "double",
 217 :         std::vector<size_t>{});
 218 :       lowerbound = std::numeric_limits<double>::quiet_NaN();
 219 :       current_statement__ = 66;
 220 :       lowerbound = context__.vals_r("lowerbound")[(1 - 1)];
 221 :       current_statement__ = 67;
 222 :       context__.validate_dims("data initialization", "upperbound", "double",
 223 :         std::vector<size_t>{});
 224 :       upperbound = std::numeric_limits<double>::quiet_NaN();
 225 :       current_statement__ = 67;
 226 :       upperbound = context__.vals_r("upperbound")[(1 - 1)];
 227 :       current_statement__ = 68;
 228 :       stan::math::validate_non_negative_index("floral", "K", K);
 229 :       current_statement__ = 69;
 230 :       context__.validate_dims("data initialization", "floral", "double",
 231 :         std::vector<size_t>{static_cast<size_t>(K)});
 232 :       floral_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
 233 :                         std::numeric_limits<double>::quiet_NaN());
 234 :       new (&floral)
 235 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(floral_data__.data(), K);
 236 :       {
 237 :         std::vector<local_scalar_t__> floral_flat__;
 238 :         current_statement__ = 69;
 239 :         floral_flat__ = context__.vals_r("floral");
 240 :         current_statement__ = 69;
 241 :         pos__ = 1;
 242 :         current_statement__ = 69;
 243 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 244 :           current_statement__ = 69;
 245 :           stan::model::assign(floral, floral_flat__[(pos__ - 1)],
 246 :             "assigning variable floral", stan::model::index_uni(sym1__));
 247 :           current_statement__ = 69;
 248 :           pos__ = (pos__ + 1);
 249 :         }
 250 :       }
 251 :       current_statement__ = 70;
 252 :       stan::math::validate_non_negative_index("landscape", "C", C);
 253 :       current_statement__ = 71;
 254 :       context__.validate_dims("data initialization", "landscape", "double",
 255 :         std::vector<size_t>{static_cast<size_t>(C)});
 256 :       landscape_data__ = Eigen::Matrix<double,-1,1>::Constant(C,
 257 :                            std::numeric_limits<double>::quiet_NaN());
 258 :       new (&landscape)
 259 :         Eigen::Map<Eigen::Matrix<double,-1,1>>(landscape_data__.data(), C);
 260 :       {
 261 :         std::vector<local_scalar_t__> landscape_flat__;
 262 :         current_statement__ = 71;
 263 :         landscape_flat__ = context__.vals_r("landscape");
 264 :         current_statement__ = 71;
 265 :         pos__ = 1;
 266 :         current_statement__ = 71;
 267 :         for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 268 :           current_statement__ = 71;
 269 :           stan::model::assign(landscape, landscape_flat__[(pos__ - 1)],
 270 :             "assigning variable landscape", stan::model::index_uni(sym1__));
 271 :           current_statement__ = 71;
 272 :           pos__ = (pos__ + 1);
 273 :         }
 274 :       }
 275 :       current_statement__ = 72;
 276 :       context__.validate_dims("data initialization", "rho_center", "double",
 277 :         std::vector<size_t>{});
 278 :       rho_center = std::numeric_limits<double>::quiet_NaN();
 279 :       current_statement__ = 72;
 280 :       rho_center = context__.vals_r("rho_center")[(1 - 1)];
 281 :       current_statement__ = 72;
 282 :       stan::math::check_greater_or_equal(function__, "rho_center",
 283 :         rho_center, 0);
 284 :       current_statement__ = 73;
 285 :       context__.validate_dims("data initialization", "rho_sd", "double",
 286 :         std::vector<size_t>{});
 287 :       rho_sd = std::numeric_limits<double>::quiet_NaN();
 288 :       current_statement__ = 73;
 289 :       rho_sd = context__.vals_r("rho_sd")[(1 - 1)];
 290 :       current_statement__ = 73;
 291 :       stan::math::check_greater_or_equal(function__, "rho_sd", rho_sd, 0);
 292 :       current_statement__ = 74;
 293 :       context__.validate_dims("data initialization", "priorVa", "double",
 294 :         std::vector<size_t>{});
 295 :       priorVa = std::numeric_limits<double>::quiet_NaN();
 296 :       current_statement__ = 74;
 297 :       priorVa = context__.vals_r("priorVa")[(1 - 1)];
 298 :       current_statement__ = 74;
 299 :       stan::math::check_greater_or_equal(function__, "priorVa", priorVa, 0);
 300 :       current_statement__ = 75;
 301 :       context__.validate_dims("data initialization", "priorCo", "double",
 302 :         std::vector<size_t>{});
 303 :       priorCo = std::numeric_limits<double>::quiet_NaN();
 304 :       current_statement__ = 75;
 305 :       priorCo = context__.vals_r("priorCo")[(1 - 1)];
 306 :       current_statement__ = 75;
 307 :       stan::math::check_greater_or_equal(function__, "priorCo", priorCo, 0);
 308 :       current_statement__ = 76;
 309 :       stan::math::validate_non_negative_index("eps", "K", K);
 310 :       current_statement__ = 77;
 311 :       stan::math::validate_non_negative_index("zeta", "C", C);
 312 :       current_statement__ = 78;
 313 :       stan::math::validate_non_negative_index("delta", "C", C);
 314 :       current_statement__ = 79;
 315 :       stan::math::validate_non_negative_index("zeta_scale", "C", C);
 316 :       current_statement__ = 80;
 317 :       stan::math::validate_non_negative_index("eps_scale", "K", K);
 318 :       current_statement__ = 81;
 319 :       stan::math::validate_non_negative_index("colony_dist", "C", C);
 320 :     } catch (const std::exception& e) {
 321 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 322 :     }
 323 :     num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + K + C + (C * 2);
 324 :   }
 325 :   inline std::string model_name() const final {
 326 :     return "model35a7d147f866e_";
 327 :   }
 328 :   inline std::vector<std::string> model_compile_info() const noexcept {
 329 :     return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
 330 :              "stancflags = --"};
 331 :   }
 332 :   template <bool propto__, bool jacobian__, typename VecR, typename VecI,
 333 :             stan::require_vector_like_t<VecR>* = nullptr,
 334 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 335 :   inline stan::scalar_type_t<VecR>
 336 :   log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
 337 :                 pstream__ = nullptr) const {
 338 :     using T__ = stan::scalar_type_t<VecR>;
 339 :     using local_scalar_t__ = T__;
 340 :     T__ lp__(0.0);
 341 :     stan::math::accumulator<T__> lp_accum__;
 342 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 343 :     int current_statement__ = 0;
 344 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 345 :     // suppress unused var warning
 346 :     (void) DUMMY_VAR__;
 347 :     static constexpr const char* function__ =
 348 :       "model35a7d147f866e__namespace::log_prob";
 349 :     // suppress unused var warning
 350 :     (void) function__;
 351 :     try {
 352 :       local_scalar_t__ rho = DUMMY_VAR__;
 353 :       current_statement__ = 1;
 354 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 355 :               lp__);
 356 :       local_scalar_t__ sigma = DUMMY_VAR__;
 357 :       current_statement__ = 2;
 358 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 359 :                 jacobian__>(0, lp__);
 360 :       local_scalar_t__ tau = DUMMY_VAR__;
 361 :       current_statement__ = 3;
 362 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 363 :               lp__);
 364 :       local_scalar_t__ alpha = DUMMY_VAR__;
 365 :       current_statement__ = 4;
 366 :       alpha = in__.template read<local_scalar_t__>();
 367 :       local_scalar_t__ theta = DUMMY_VAR__;
 368 :       current_statement__ = 5;
 369 :       theta = in__.template read<local_scalar_t__>();
 370 :       local_scalar_t__ mu = DUMMY_VAR__;
 371 :       current_statement__ = 6;
 372 :       mu = in__.template read<local_scalar_t__>();
 373 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 374 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 375 :       current_statement__ = 7;
 376 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 377 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 378 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 379 :       current_statement__ = 8;
 380 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 381 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 382 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 383 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 384 :       current_statement__ = 9;
 385 :       delta = in__.template read_constrain_lub<
 386 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 387 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 388 :       local_scalar_t__ tau_sqrt = DUMMY_VAR__;
 389 :       current_statement__ = 10;
 390 :       tau_sqrt = stan::math::sqrt(tau);
 391 :       local_scalar_t__ sigma_sqrt = DUMMY_VAR__;
 392 :       current_statement__ = 11;
 393 :       sigma_sqrt = stan::math::sqrt(sigma);
 394 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta_scale =
 395 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 396 :       current_statement__ = 12;
 397 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 398 :         "assigning variable zeta_scale");
 399 :       Eigen::Matrix<local_scalar_t__,-1,1> eps_scale =
 400 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 401 :       current_statement__ = 13;
 402 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 403 :         "assigning variable eps_scale");
 404 :       current_statement__ = 10;
 405 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 406 :       current_statement__ = 11;
 407 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 408 :         sigma_sqrt, 0);
 409 :       {
 410 :         current_statement__ = 38;
 411 :         stan::math::validate_non_negative_index("dis", "C", C);
 412 :         current_statement__ = 39;
 413 :         stan::math::validate_non_negative_index("dis", "K", K);
 414 :         Eigen::Matrix<local_scalar_t__,-1,-1> dis =
 415 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 416 :         current_statement__ = 41;
 417 :         stan::math::validate_non_negative_index("lambda", "C", C);
 418 :         current_statement__ = 42;
 419 :         stan::math::validate_non_negative_index("lambda", "K", K);
 420 :         Eigen::Matrix<local_scalar_t__,-1,-1> lambda =
 421 :           Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(C, K, DUMMY_VAR__);
 422 :         current_statement__ = 44;
 423 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, priorVa));
 424 :         current_statement__ = 45;
 425 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(tau, 0, priorVa));
 426 :         current_statement__ = 46;
 427 :         lp_accum__.add(stan::math::lognormal_lpdf<propto__>(rho, rho_center,
 428 :                          rho_sd));
 429 :         current_statement__ = 47;
 430 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, priorCo));
 431 :         current_statement__ = 48;
 432 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(theta, 0, priorCo));
 433 :         current_statement__ = 49;
 434 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, priorCo));
 435 :         current_statement__ = 50;
 436 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(eps, 0, 1));
 437 :         current_statement__ = 51;
 438 :         lp_accum__.add(stan::math::normal_lpdf<propto__>(zeta, 0, 1));
 439 :         current_statement__ = 58;
 440 :         for (int k = 1; k <= K; ++k) {
 441 :           current_statement__ = 56;
 442 :           for (int i = 1; i <= C; ++i) {
 443 :             current_statement__ = 52;
 444 :             stan::model::assign(dis,
 445 :               stan::math::sqrt(
 446 :                 (stan::math::square(
 447 :                    (stan::model::rvalue(delta, "delta",
 448 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 449 :                    stan::model::rvalue(trap, "trap",
 450 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 451 :                 +
 452 :                 stan::math::square(
 453 :                   (stan::model::rvalue(delta, "delta",
 454 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 455 :                   stan::model::rvalue(trap, "trap",
 456 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 457 :               "assigning variable dis", stan::model::index_uni(i),
 458 :               stan::model::index_uni(k));
 459 :             current_statement__ = 53;
 460 :             stan::model::assign(lambda,
 461 :               (((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 462 :                      stan::model::index_uni(k)) / (-rho *
 463 :               stan::math::exp((alpha *
 464 :                 stan::model::rvalue(landscape, "landscape",
 465 :                   stan::model::index_uni(i)))))) + (theta *
 466 :               stan::model::rvalue(floral, "floral", stan::model::index_uni(k))))
 467 :               + mu) +
 468 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 469 :                 stan::model::index_uni(i))) +
 470 :               stan::model::rvalue(eps_scale, "eps_scale",
 471 :                 stan::model::index_uni(k))), "assigning variable lambda",
 472 :               stan::model::index_uni(i), stan::model::index_uni(k));
 473 :             current_statement__ = 54;
 474 :             lp_accum__.add(stan::math::poisson_log_lpmf<propto__>(
 475 :                              stan::model::rvalue(y, "y",
 476 :                                stan::model::index_uni(i),
 477 :                                stan::model::index_uni(k)),
 478 :                              stan::model::rvalue(lambda, "lambda",
 479 :                                stan::model::index_uni(i),
 480 :                                stan::model::index_uni(k))));
 481 :           }
 482 :         }
 483 :       }
 484 :     } catch (const std::exception& e) {
 485 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 486 :     }
 487 :     lp_accum__.add(lp__);
 488 :     return lp_accum__.sum();
 489 :   }
 490 :   template <typename RNG, typename VecR, typename VecI, typename VecVar,
 491 :             stan::require_vector_like_vt<std::is_floating_point,
 492 :             VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
 493 :             VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
 494 :             VecVar>* = nullptr>
 495 :   inline void
 496 :   write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
 497 :                    VecVar& vars__, const bool
 498 :                    emit_transformed_parameters__ = true, const bool
 499 :                    emit_generated_quantities__ = true, std::ostream*
 500 :                    pstream__ = nullptr) const {
 501 :     using local_scalar_t__ = double;
 502 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 503 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 504 :     static constexpr bool propto__ = true;
 505 :     // suppress unused var warning
 506 :     (void) propto__;
 507 :     double lp__ = 0.0;
 508 :     // suppress unused var warning
 509 :     (void) lp__;
 510 :     int current_statement__ = 0;
 511 :     stan::math::accumulator<double> lp_accum__;
 512 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 513 :     // suppress unused var warning
 514 :     (void) DUMMY_VAR__;
 515 :     constexpr bool jacobian__ = false;
 516 :     static constexpr const char* function__ =
 517 :       "model35a7d147f866e__namespace::write_array";
 518 :     // suppress unused var warning
 519 :     (void) function__;
 520 :     try {
 521 :       double rho = std::numeric_limits<double>::quiet_NaN();
 522 :       current_statement__ = 1;
 523 :       rho = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 524 :               lp__);
 525 :       double sigma = std::numeric_limits<double>::quiet_NaN();
 526 :       current_statement__ = 2;
 527 :       sigma = in__.template read_constrain_lb<local_scalar_t__,
 528 :                 jacobian__>(0, lp__);
 529 :       double tau = std::numeric_limits<double>::quiet_NaN();
 530 :       current_statement__ = 3;
 531 :       tau = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
 532 :               lp__);
 533 :       double alpha = std::numeric_limits<double>::quiet_NaN();
 534 :       current_statement__ = 4;
 535 :       alpha = in__.template read<local_scalar_t__>();
 536 :       double theta = std::numeric_limits<double>::quiet_NaN();
 537 :       current_statement__ = 5;
 538 :       theta = in__.template read<local_scalar_t__>();
 539 :       double mu = std::numeric_limits<double>::quiet_NaN();
 540 :       current_statement__ = 6;
 541 :       mu = in__.template read<local_scalar_t__>();
 542 :       Eigen::Matrix<double,-1,1> eps =
 543 :         Eigen::Matrix<double,-1,1>::Constant(K,
 544 :           std::numeric_limits<double>::quiet_NaN());
 545 :       current_statement__ = 7;
 546 :       eps = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
 547 :       Eigen::Matrix<double,-1,1> zeta =
 548 :         Eigen::Matrix<double,-1,1>::Constant(C,
 549 :           std::numeric_limits<double>::quiet_NaN());
 550 :       current_statement__ = 8;
 551 :       zeta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(C);
 552 :       std::vector<Eigen::Matrix<double,-1,1>> delta =
 553 :         std::vector<Eigen::Matrix<double,-1,1>>(C,
 554 :           Eigen::Matrix<double,-1,1>::Constant(2,
 555 :             std::numeric_limits<double>::quiet_NaN()));
 556 :       current_statement__ = 9;
 557 :       delta = in__.template read_constrain_lub<
 558 :                 std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>,
 559 :                 jacobian__>(lowerbound, upperbound, lp__, C, 2);
 560 :       double tau_sqrt = std::numeric_limits<double>::quiet_NaN();
 561 :       double sigma_sqrt = std::numeric_limits<double>::quiet_NaN();
 562 :       Eigen::Matrix<double,-1,1> zeta_scale =
 563 :         Eigen::Matrix<double,-1,1>::Constant(C,
 564 :           std::numeric_limits<double>::quiet_NaN());
 565 :       Eigen::Matrix<double,-1,1> eps_scale =
 566 :         Eigen::Matrix<double,-1,1>::Constant(K,
 567 :           std::numeric_limits<double>::quiet_NaN());
 568 :       out__.write(rho);
 569 :       out__.write(sigma);
 570 :       out__.write(tau);
 571 :       out__.write(alpha);
 572 :       out__.write(theta);
 573 :       out__.write(mu);
 574 :       out__.write(eps);
 575 :       out__.write(zeta);
 576 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 577 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 578 :           out__.write(delta[(sym2__ - 1)][(sym1__ - 1)]);
 579 :         }
 580 :       }
 581 :       if (stan::math::logical_negation(
 582 :             (stan::math::primitive_value(emit_transformed_parameters__) ||
 583 :             stan::math::primitive_value(emit_generated_quantities__)))) {
 584 :         return ;
 585 :       }
 586 :       current_statement__ = 10;
 587 :       tau_sqrt = stan::math::sqrt(tau);
 588 :       current_statement__ = 11;
 589 :       sigma_sqrt = stan::math::sqrt(sigma);
 590 :       current_statement__ = 12;
 591 :       stan::model::assign(zeta_scale, stan::math::multiply(zeta, tau_sqrt),
 592 :         "assigning variable zeta_scale");
 593 :       current_statement__ = 13;
 594 :       stan::model::assign(eps_scale, stan::math::multiply(eps, sigma_sqrt),
 595 :         "assigning variable eps_scale");
 596 :       current_statement__ = 10;
 597 :       stan::math::check_greater_or_equal(function__, "tau_sqrt", tau_sqrt, 0);
 598 :       current_statement__ = 11;
 599 :       stan::math::check_greater_or_equal(function__, "sigma_sqrt",
 600 :         sigma_sqrt, 0);
 601 :       if (emit_transformed_parameters__) {
 602 :         out__.write(tau_sqrt);
 603 :         out__.write(sigma_sqrt);
 604 :         out__.write(zeta_scale);
 605 :         out__.write(eps_scale);
 606 :       }
 607 :       if (stan::math::logical_negation(emit_generated_quantities__)) {
 608 :         return ;
 609 :       }
 610 :       Eigen::Matrix<double,-1,1> colony_dist =
 611 :         Eigen::Matrix<double,-1,1>::Constant(C,
 612 :           std::numeric_limits<double>::quiet_NaN());
 613 :       current_statement__ = 15;
 614 :       stan::model::assign(colony_dist, stan::math::rep_vector(0, C),
 615 :         "assigning variable colony_dist");
 616 :       {
 617 :         current_statement__ = 16;
 618 :         stan::math::validate_non_negative_index("dis", "C", C);
 619 :         current_statement__ = 17;
 620 :         stan::math::validate_non_negative_index("dis", "K", K);
 621 :         Eigen::Matrix<double,-1,-1> dis =
 622 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 623 :             std::numeric_limits<double>::quiet_NaN());
 624 :         current_statement__ = 19;
 625 :         stan::math::validate_non_negative_index("lambda", "C", C);
 626 :         current_statement__ = 20;
 627 :         stan::math::validate_non_negative_index("lambda", "K", K);
 628 :         Eigen::Matrix<double,-1,-1> lambda =
 629 :           Eigen::Matrix<double,-1,-1>::Constant(C, K,
 630 :             std::numeric_limits<double>::quiet_NaN());
 631 :         current_statement__ = 22;
 632 :         stan::math::validate_non_negative_index("V", "C", C);
 633 :         Eigen::Matrix<double,-1,1> V =
 634 :           Eigen::Matrix<double,-1,1>::Constant(C,
 635 :             std::numeric_limits<double>::quiet_NaN());
 636 :         double nugget = std::numeric_limits<double>::quiet_NaN();
 637 :         current_statement__ = 24;
 638 :         nugget = 1e-12;
 639 :         current_statement__ = 30;
 640 :         for (int k = 1; k <= K; ++k) {
 641 :           current_statement__ = 28;
 642 :           for (int i = 1; i <= C; ++i) {
 643 :             current_statement__ = 25;
 644 :             stan::model::assign(dis,
 645 :               stan::math::sqrt(
 646 :                 (stan::math::square(
 647 :                    (stan::model::rvalue(delta, "delta",
 648 :                       stan::model::index_uni(i), stan::model::index_uni(1)) -
 649 :                    stan::model::rvalue(trap, "trap",
 650 :                      stan::model::index_uni(k), stan::model::index_uni(1))))
 651 :                 +
 652 :                 stan::math::square(
 653 :                   (stan::model::rvalue(delta, "delta",
 654 :                      stan::model::index_uni(i), stan::model::index_uni(2)) -
 655 :                   stan::model::rvalue(trap, "trap",
 656 :                     stan::model::index_uni(k), stan::model::index_uni(2)))))),
 657 :               "assigning variable dis", stan::model::index_uni(i),
 658 :               stan::model::index_uni(k));
 659 :             current_statement__ = 26;
 660 :             stan::model::assign(lambda,
 661 :               (((((stan::model::rvalue(dis, "dis", stan::model::index_uni(i),
 662 :                      stan::model::index_uni(k)) / (-rho *
 663 :               stan::math::exp((alpha *
 664 :                 stan::model::rvalue(landscape, "landscape",
 665 :                   stan::model::index_uni(i)))))) + (theta *
 666 :               stan::model::rvalue(floral, "floral", stan::model::index_uni(k))))
 667 :               + mu) +
 668 :               stan::model::rvalue(zeta_scale, "zeta_scale",
 669 :                 stan::model::index_uni(i))) +
 670 :               stan::model::rvalue(eps_scale, "eps_scale",
 671 :                 stan::model::index_uni(k))), "assigning variable lambda",
 672 :               stan::model::index_uni(i), stan::model::index_uni(k));
 673 :           }
 674 :         }
 675 :         current_statement__ = 33;
 676 :         for (int i = 1; i <= C; ++i) {
 677 :           current_statement__ = 31;
 678 :           stan::model::assign(V,
 679 :             stan::math::sum(
 680 :               stan::math::exp(
 681 :                 stan::model::rvalue(lambda, "lambda",
 682 :                   stan::model::index_uni(i), stan::model::index_omni()))),
 683 :             "assigning variable V", stan::model::index_uni(i));
 684 :         }
 685 :         current_statement__ = 36;
 686 :         for (int k = 1; k <= K; ++k) {
 687 :           current_statement__ = 34;
 688 :           stan::model::assign(colony_dist,
 689 :             stan::math::add(stan::model::deep_copy(colony_dist),
 690 :               stan::math::elt_divide(
 691 :                 stan::math::elt_multiply(
 692 :                   stan::model::rvalue(dis, "dis", stan::model::index_omni(),
 693 :                     stan::model::index_uni(k)),
 694 :                   stan::math::exp(
 695 :                     stan::model::rvalue(lambda, "lambda",
 696 :                       stan::model::index_omni(), stan::model::index_uni(k)))),
 697 :                 stan::math::add(V, nugget))),
 698 :             "assigning variable colony_dist");
 699 :         }
 700 :       }
 701 :       out__.write(colony_dist);
 702 :     } catch (const std::exception& e) {
 703 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 704 :     }
 705 :   }
 706 :   template <typename VecVar, typename VecI,
 707 :             stan::require_vector_t<VecVar>* = nullptr,
 708 :             stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
 709 :   inline void
 710 :   unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
 711 :                          VecVar& vars__, std::ostream* pstream__ = nullptr) const {
 712 :     using local_scalar_t__ = double;
 713 :     stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
 714 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 715 :     int current_statement__ = 0;
 716 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 717 :     // suppress unused var warning
 718 :     (void) DUMMY_VAR__;
 719 :     try {
 720 :       int pos__ = std::numeric_limits<int>::min();
 721 :       pos__ = 1;
 722 :       local_scalar_t__ rho = DUMMY_VAR__;
 723 :       current_statement__ = 1;
 724 :       rho = in__.read<local_scalar_t__>();
 725 :       out__.write_free_lb(0, rho);
 726 :       local_scalar_t__ sigma = DUMMY_VAR__;
 727 :       current_statement__ = 2;
 728 :       sigma = in__.read<local_scalar_t__>();
 729 :       out__.write_free_lb(0, sigma);
 730 :       local_scalar_t__ tau = DUMMY_VAR__;
 731 :       current_statement__ = 3;
 732 :       tau = in__.read<local_scalar_t__>();
 733 :       out__.write_free_lb(0, tau);
 734 :       local_scalar_t__ alpha = DUMMY_VAR__;
 735 :       current_statement__ = 4;
 736 :       alpha = in__.read<local_scalar_t__>();
 737 :       out__.write(alpha);
 738 :       local_scalar_t__ theta = DUMMY_VAR__;
 739 :       current_statement__ = 5;
 740 :       theta = in__.read<local_scalar_t__>();
 741 :       out__.write(theta);
 742 :       local_scalar_t__ mu = DUMMY_VAR__;
 743 :       current_statement__ = 6;
 744 :       mu = in__.read<local_scalar_t__>();
 745 :       out__.write(mu);
 746 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 747 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 748 :       current_statement__ = 7;
 749 :       stan::model::assign(eps,
 750 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
 751 :         "assigning variable eps");
 752 :       out__.write(eps);
 753 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 754 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 755 :       current_statement__ = 8;
 756 :       stan::model::assign(zeta,
 757 :         in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(C),
 758 :         "assigning variable zeta");
 759 :       out__.write(zeta);
 760 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 761 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 762 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 763 :       current_statement__ = 9;
 764 :       for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 765 :         current_statement__ = 9;
 766 :         for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 767 :           current_statement__ = 9;
 768 :           stan::model::assign(delta, in__.read<local_scalar_t__>(),
 769 :             "assigning variable delta", stan::model::index_uni(sym2__),
 770 :             stan::model::index_uni(sym1__));
 771 :         }
 772 :       }
 773 :       out__.write_free_lub(lowerbound, upperbound, delta);
 774 :     } catch (const std::exception& e) {
 775 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 776 :     }
 777 :   }
 778 :   template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
 779 :   inline void
 780 :   transform_inits_impl(const stan::io::var_context& context__, VecVar&
 781 :                        vars__, std::ostream* pstream__ = nullptr) const {
 782 :     using local_scalar_t__ = double;
 783 :     stan::io::serializer<local_scalar_t__> out__(vars__);
 784 :     int current_statement__ = 0;
 785 :     local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
 786 :     // suppress unused var warning
 787 :     (void) DUMMY_VAR__;
 788 :     try {
 789 :       current_statement__ = 1;
 790 :       context__.validate_dims("parameter initialization", "rho", "double",
 791 :         std::vector<size_t>{});
 792 :       current_statement__ = 2;
 793 :       context__.validate_dims("parameter initialization", "sigma", "double",
 794 :         std::vector<size_t>{});
 795 :       current_statement__ = 3;
 796 :       context__.validate_dims("parameter initialization", "tau", "double",
 797 :         std::vector<size_t>{});
 798 :       current_statement__ = 4;
 799 :       context__.validate_dims("parameter initialization", "alpha", "double",
 800 :         std::vector<size_t>{});
 801 :       current_statement__ = 5;
 802 :       context__.validate_dims("parameter initialization", "theta", "double",
 803 :         std::vector<size_t>{});
 804 :       current_statement__ = 6;
 805 :       context__.validate_dims("parameter initialization", "mu", "double",
 806 :         std::vector<size_t>{});
 807 :       current_statement__ = 7;
 808 :       context__.validate_dims("parameter initialization", "eps", "double",
 809 :         std::vector<size_t>{static_cast<size_t>(K)});
 810 :       current_statement__ = 8;
 811 :       context__.validate_dims("parameter initialization", "zeta", "double",
 812 :         std::vector<size_t>{static_cast<size_t>(C)});
 813 :       current_statement__ = 9;
 814 :       context__.validate_dims("parameter initialization", "delta", "double",
 815 :         std::vector<size_t>{static_cast<size_t>(C), static_cast<size_t>(2)});
 816 :       int pos__ = std::numeric_limits<int>::min();
 817 :       pos__ = 1;
 818 :       local_scalar_t__ rho = DUMMY_VAR__;
 819 :       current_statement__ = 1;
 820 :       rho = context__.vals_r("rho")[(1 - 1)];
 821 :       out__.write_free_lb(0, rho);
 822 :       local_scalar_t__ sigma = DUMMY_VAR__;
 823 :       current_statement__ = 2;
 824 :       sigma = context__.vals_r("sigma")[(1 - 1)];
 825 :       out__.write_free_lb(0, sigma);
 826 :       local_scalar_t__ tau = DUMMY_VAR__;
 827 :       current_statement__ = 3;
 828 :       tau = context__.vals_r("tau")[(1 - 1)];
 829 :       out__.write_free_lb(0, tau);
 830 :       local_scalar_t__ alpha = DUMMY_VAR__;
 831 :       current_statement__ = 4;
 832 :       alpha = context__.vals_r("alpha")[(1 - 1)];
 833 :       out__.write(alpha);
 834 :       local_scalar_t__ theta = DUMMY_VAR__;
 835 :       current_statement__ = 5;
 836 :       theta = context__.vals_r("theta")[(1 - 1)];
 837 :       out__.write(theta);
 838 :       local_scalar_t__ mu = DUMMY_VAR__;
 839 :       current_statement__ = 6;
 840 :       mu = context__.vals_r("mu")[(1 - 1)];
 841 :       out__.write(mu);
 842 :       Eigen::Matrix<local_scalar_t__,-1,1> eps =
 843 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
 844 :       {
 845 :         std::vector<local_scalar_t__> eps_flat__;
 846 :         current_statement__ = 7;
 847 :         eps_flat__ = context__.vals_r("eps");
 848 :         current_statement__ = 7;
 849 :         pos__ = 1;
 850 :         current_statement__ = 7;
 851 :         for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 852 :           current_statement__ = 7;
 853 :           stan::model::assign(eps, eps_flat__[(pos__ - 1)],
 854 :             "assigning variable eps", stan::model::index_uni(sym1__));
 855 :           current_statement__ = 7;
 856 :           pos__ = (pos__ + 1);
 857 :         }
 858 :       }
 859 :       out__.write(eps);
 860 :       Eigen::Matrix<local_scalar_t__,-1,1> zeta =
 861 :         Eigen::Matrix<local_scalar_t__,-1,1>::Constant(C, DUMMY_VAR__);
 862 :       {
 863 :         std::vector<local_scalar_t__> zeta_flat__;
 864 :         current_statement__ = 8;
 865 :         zeta_flat__ = context__.vals_r("zeta");
 866 :         current_statement__ = 8;
 867 :         pos__ = 1;
 868 :         current_statement__ = 8;
 869 :         for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 870 :           current_statement__ = 8;
 871 :           stan::model::assign(zeta, zeta_flat__[(pos__ - 1)],
 872 :             "assigning variable zeta", stan::model::index_uni(sym1__));
 873 :           current_statement__ = 8;
 874 :           pos__ = (pos__ + 1);
 875 :         }
 876 :       }
 877 :       out__.write(zeta);
 878 :       std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> delta =
 879 :         std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(C,
 880 :           Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__));
 881 :       {
 882 :         std::vector<local_scalar_t__> delta_flat__;
 883 :         current_statement__ = 9;
 884 :         delta_flat__ = context__.vals_r("delta");
 885 :         current_statement__ = 9;
 886 :         pos__ = 1;
 887 :         current_statement__ = 9;
 888 :         for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 889 :           current_statement__ = 9;
 890 :           for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 891 :             current_statement__ = 9;
 892 :             stan::model::assign(delta, delta_flat__[(pos__ - 1)],
 893 :               "assigning variable delta", stan::model::index_uni(sym2__),
 894 :               stan::model::index_uni(sym1__));
 895 :             current_statement__ = 9;
 896 :             pos__ = (pos__ + 1);
 897 :           }
 898 :         }
 899 :       }
 900 :       out__.write_free_lub(lowerbound, upperbound, delta);
 901 :     } catch (const std::exception& e) {
 902 :       stan::lang::rethrow_located(e, locations_array__[current_statement__]);
 903 :     }
 904 :   }
 905 :   inline void
 906 :   get_param_names(std::vector<std::string>& names__, const bool
 907 :                   emit_transformed_parameters__ = true, const bool
 908 :                   emit_generated_quantities__ = true) const {
 909 :     names__ = std::vector<std::string>{"rho", "sigma", "tau", "alpha",
 910 :                 "theta", "mu", "eps", "zeta", "delta"};
 911 :     if (emit_transformed_parameters__) {
 912 :       std::vector<std::string>
 913 :         temp{"tau_sqrt", "sigma_sqrt", "zeta_scale", "eps_scale"};
 914 :       names__.reserve(names__.size() + temp.size());
 915 :       names__.insert(names__.end(), temp.begin(), temp.end());
 916 :     }
 917 :     if (emit_generated_quantities__) {
 918 :       std::vector<std::string> temp{"colony_dist"};
 919 :       names__.reserve(names__.size() + temp.size());
 920 :       names__.insert(names__.end(), temp.begin(), temp.end());
 921 :     }
 922 :   }
 923 :   inline void
 924 :   get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
 925 :            emit_transformed_parameters__ = true, const bool
 926 :            emit_generated_quantities__ = true) const {
 927 :     dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
 928 :                 std::vector<size_t>{}, std::vector<size_t>{},
 929 :                 std::vector<size_t>{}, std::vector<size_t>{},
 930 :                 std::vector<size_t>{},
 931 :                 std::vector<size_t>{static_cast<size_t>(K)},
 932 :                 std::vector<size_t>{static_cast<size_t>(C)},
 933 :                 std::vector<size_t>{static_cast<size_t>(C),
 934 :                   static_cast<size_t>(2)}};
 935 :     if (emit_transformed_parameters__) {
 936 :       std::vector<std::vector<size_t>>
 937 :         temp{std::vector<size_t>{}, std::vector<size_t>{},
 938 :              std::vector<size_t>{static_cast<size_t>(C)},
 939 :              std::vector<size_t>{static_cast<size_t>(K)}};
 940 :       dimss__.reserve(dimss__.size() + temp.size());
 941 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 942 :     }
 943 :     if (emit_generated_quantities__) {
 944 :       std::vector<std::vector<size_t>>
 945 :         temp{std::vector<size_t>{static_cast<size_t>(C)}};
 946 :       dimss__.reserve(dimss__.size() + temp.size());
 947 :       dimss__.insert(dimss__.end(), temp.begin(), temp.end());
 948 :     }
 949 :   }
 950 :   inline void
 951 :   constrained_param_names(std::vector<std::string>& param_names__, bool
 952 :                           emit_transformed_parameters__ = true, bool
 953 :                           emit_generated_quantities__ = true) const final {
 954 :     param_names__.emplace_back(std::string() + "rho");
 955 :     param_names__.emplace_back(std::string() + "sigma");
 956 :     param_names__.emplace_back(std::string() + "tau");
 957 :     param_names__.emplace_back(std::string() + "alpha");
 958 :     param_names__.emplace_back(std::string() + "theta");
 959 :     param_names__.emplace_back(std::string() + "mu");
 960 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 961 :       param_names__.emplace_back(std::string() + "eps" + '.' +
 962 :         std::to_string(sym1__));
 963 :     }
 964 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 965 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
 966 :         std::to_string(sym1__));
 967 :     }
 968 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
 969 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
 970 :         param_names__.emplace_back(std::string() + "delta" + '.' +
 971 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
 972 :       }
 973 :     }
 974 :     if (emit_transformed_parameters__) {
 975 :       param_names__.emplace_back(std::string() + "tau_sqrt");
 976 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
 977 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 978 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
 979 :           std::to_string(sym1__));
 980 :       }
 981 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
 982 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
 983 :           std::to_string(sym1__));
 984 :       }
 985 :     }
 986 :     if (emit_generated_quantities__) {
 987 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
 988 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
 989 :           std::to_string(sym1__));
 990 :       }
 991 :     }
 992 :   }
 993 :   inline void
 994 :   unconstrained_param_names(std::vector<std::string>& param_names__, bool
 995 :                             emit_transformed_parameters__ = true, bool
 996 :                             emit_generated_quantities__ = true) const final {
 997 :     param_names__.emplace_back(std::string() + "rho");
 998 :     param_names__.emplace_back(std::string() + "sigma");
 999 :     param_names__.emplace_back(std::string() + "tau");
1000 :     param_names__.emplace_back(std::string() + "alpha");
1001 :     param_names__.emplace_back(std::string() + "theta");
1002 :     param_names__.emplace_back(std::string() + "mu");
1003 :     for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
1004 :       param_names__.emplace_back(std::string() + "eps" + '.' +
1005 :         std::to_string(sym1__));
1006 :     }
1007 :     for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1008 :       param_names__.emplace_back(std::string() + "zeta" + '.' +
1009 :         std::to_string(sym1__));
1010 :     }
1011 :     for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
1012 :       for (int sym2__ = 1; sym2__ <= C; ++sym2__) {
1013 :         param_names__.emplace_back(std::string() + "delta" + '.' +
1014 :           std::to_string(sym2__) + '.' + std::to_string(sym1__));
1015 :       }
1016 :     }
1017 :     if (emit_transformed_parameters__) {
1018 :       param_names__.emplace_back(std::string() + "tau_sqrt");
1019 :       param_names__.emplace_back(std::string() + "sigma_sqrt");
1020 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1021 :         param_names__.emplace_back(std::string() + "zeta_scale" + '.' +
1022 :           std::to_string(sym1__));
1023 :       }
1024 :       for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
1025 :         param_names__.emplace_back(std::string() + "eps_scale" + '.' +
1026 :           std::to_string(sym1__));
1027 :       }
1028 :     }
1029 :     if (emit_generated_quantities__) {
1030 :       for (int sym1__ = 1; sym1__ <= C; ++sym1__) {
1031 :         param_names__.emplace_back(std::string() + "colony_dist" + '.' +
1032 :           std::to_string(sym1__));
1033 :       }
1034 :     }
1035 :   }
1036 :   inline std::string get_constrained_sizedtypes() const {
1037 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
1038 :   }
1039 :   inline std::string get_unconstrained_sizedtypes() const {
1040 :     return std::string("[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eps\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"parameters\"},{\"name\":\"delta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(C) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"parameters\"},{\"name\":\"tau_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma_sqrt\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"zeta_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eps_scale\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"colony_dist\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(C) + "},\"block\":\"generated_quantities\"}]");
1041 :   }
1042 :   // Begin method overload boilerplate
1043 :   template <typename RNG> inline void
1044 :   write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
1045 :               Eigen::Matrix<double,-1,1>& vars, const bool
1046 :               emit_transformed_parameters = true, const bool
1047 :               emit_generated_quantities = true, std::ostream*
1048 :               pstream = nullptr) const {
1049 :     const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + 1) + 1) + K) + C)
1050 :       + (C * 2));
1051 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1052 :       C) + K));
1053 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1054 :     const size_t num_to_write = num_params__ + num_transformed +
1055 :       num_gen_quantities;
1056 :     std::vector<int> params_i;
1057 :     vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
1058 :              std::numeric_limits<double>::quiet_NaN());
1059 :     write_array_impl(base_rng, params_r, params_i, vars,
1060 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1061 :   }
1062 :   template <typename RNG> inline void
1063 :   write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
1064 :               params_i, std::vector<double>& vars, bool
1065 :               emit_transformed_parameters = true, bool
1066 :               emit_generated_quantities = true, std::ostream*
1067 :               pstream = nullptr) const {
1068 :     const size_t num_params__ = ((((((((1 + 1) + 1) + 1) + 1) + 1) + K) + C)
1069 :       + (C * 2));
1070 :     const size_t num_transformed = emit_transformed_parameters * ((((1 + 1) +
1071 :       C) + K));
1072 :     const size_t num_gen_quantities = emit_generated_quantities * (C);
1073 :     const size_t num_to_write = num_params__ + num_transformed +
1074 :       num_gen_quantities;
1075 :     vars = std::vector<double>(num_to_write,
1076 :              std::numeric_limits<double>::quiet_NaN());
1077 :     write_array_impl(base_rng, params_r, params_i, vars,
1078 :       emit_transformed_parameters, emit_generated_quantities, pstream);
1079 :   }
1080 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1081 :   log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
1082 :     Eigen::Matrix<int,-1,1> params_i;
1083 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1084 :   }
1085 :   template <bool propto__, bool jacobian__, typename T_> inline T_
1086 :   log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
1087 :            std::ostream* pstream = nullptr) const {
1088 :     return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
1089 :   }
1090 :   inline void
1091 :   transform_inits(const stan::io::var_context& context,
1092 :                   Eigen::Matrix<double,-1,1>& params_r, std::ostream*
1093 :                   pstream = nullptr) const final {
1094 :     std::vector<double> params_r_vec(params_r.size());
1095 :     std::vector<int> params_i;
1096 :     transform_inits(context, params_i, params_r_vec, pstream);
1097 :     params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
1098 :                  params_r_vec.size());
1099 :   }
1100 :   inline void
1101 :   transform_inits(const stan::io::var_context& context, std::vector<int>&
1102 :                   params_i, std::vector<double>& vars, std::ostream*
1103 :                   pstream__ = nullptr) const {
1104 :     vars.resize(num_params_r__);
1105 :     transform_inits_impl(context, vars, pstream__);
1106 :   }
1107 :   inline void
1108 :   unconstrain_array(const std::vector<double>& params_constrained,
1109 :                     std::vector<double>& params_unconstrained, std::ostream*
1110 :                     pstream = nullptr) const {
1111 :     const std::vector<int> params_i;
1112 :     params_unconstrained = std::vector<double>(num_params_r__,
1113 :                              std::numeric_limits<double>::quiet_NaN());
1114 :     unconstrain_array_impl(params_constrained, params_i,
1115 :       params_unconstrained, pstream);
1116 :   }
1117 :   inline void
1118 :   unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
1119 :                     Eigen::Matrix<double,-1,1>& params_unconstrained,
1120 :                     std::ostream* pstream = nullptr) const {
1121 :     const std::vector<int> params_i;
1122 :     params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
1123 :                              std::numeric_limits<double>::quiet_NaN());
1124 :     unconstrain_array_impl(params_constrained, params_i,
1125 :       params_unconstrained, pstream);
1126 :   }
1127 : };
1128 : }
1129 : using stan_model = model35a7d147f866e__namespace::model35a7d147f866e_;
1130 : #ifndef USING_R
1131 : // Boilerplate
1132 : stan::model::model_base&
1133 : new_model(stan::io::var_context& data_context, unsigned int seed,
1134 :           std::ostream* msg_stream) {
1135 :   stan_model* m = new stan_model(data_context, seed, msg_stream);
1136 :   return *m;
1137 : }
1138 : stan::math::profile_map& get_stan_profile_data() {
1139 :   return model35a7d147f866e__namespace::profiles__;
1140 : }
1141 : #endif
1142 : #endif
1143 : 
1144 : RCPP_MODULE(stan_fit4model35a7d147f866e__mod) {
1145 :   class_<rstan::stan_fit<stan_model, boost::random::ecuyer1988> >(
1146 :       "stan_fit4model35a7d147f866e_")
1147 : 
1148 :       .constructor<SEXP, SEXP, SEXP>()
1149 : 
1150 :       .method(
1151 :           "call_sampler",
1152 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::call_sampler)
1153 :       .method(
1154 :           "param_names",
1155 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_names)
1156 :       .method("param_names_oi",
1157 :               &rstan::stan_fit<stan_model,
1158 :                                boost::random::ecuyer1988>::param_names_oi)
1159 :       .method("param_fnames_oi",
1160 :               &rstan::stan_fit<stan_model,
1161 :                                boost::random::ecuyer1988>::param_fnames_oi)
1162 :       .method(
1163 :           "param_dims",
1164 :           &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::param_dims)
1165 :       .method("param_dims_oi",
1166 :               &rstan::stan_fit<stan_model,
1167 :                                boost::random::ecuyer1988>::param_dims_oi)
1168 :       .method("update_param_oi",
1169 :               &rstan::stan_fit<stan_model,
1170 :                                boost::random::ecuyer1988>::update_param_oi)
1171 :       .method("param_oi_tidx",
1172 :               &rstan::stan_fit<stan_model,
1173 :                                boost::random::ecuyer1988>::param_oi_tidx)
1174 :       .method("grad_log_prob",
1175 :               &rstan::stan_fit<stan_model,
1176 :                                boost::random::ecuyer1988>::grad_log_prob)
1177 :       .method("log_prob",
1178 :               &rstan::stan_fit<stan_model, boost::random::ecuyer1988>::log_prob)
1179 :       .method("unconstrain_pars",
1180 :               &rstan::stan_fit<stan_model,
1181 :                                boost::random::ecuyer1988>::unconstrain_pars)
1182 :       .method("constrain_pars",
1183 :               &rstan::stan_fit<stan_model,
1184 :                                boost::random::ecuyer1988>::constrain_pars)
1185 :       .method(
1186 :           "num_pars_unconstrained",
1187 :           &rstan::stan_fit<stan_model,
1188 :                            boost::random::ecuyer1988>::num_pars_unconstrained)
1189 :       .method(
1190 :           "unconstrained_param_names",
1191 :           &rstan::stan_fit<
1192 :               stan_model, boost::random::ecuyer1988>::unconstrained_param_names)
1193 :       .method(
1194 :           "constrained_param_names",
1195 :           &rstan::stan_fit<stan_model,
1196 :                            boost::random::ecuyer1988>::constrained_param_names)
1197 :       .method("standalone_gqs",
1198 :               &rstan::stan_fit<stan_model,
1199 :                                boost::random::ecuyer1988>::standalone_gqs);
1200 : }
1201 : 
1202 : 
1203 : // declarations
1204 : extern "C" {
1205 : SEXP file35a7d6a4c099c( ) ;
1206 : }
1207 : 
1208 : // definition
1209 : SEXP file35a7d6a4c099c() {
1210 :  return Rcpp::wrap("anon_model");
1211 : }
make cmd is
  make -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/etc/Makeconf' -f '/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/share/make/shlib.mk' -f '/home/melanson/.R/Makevars' CXX='$(CXX17) $(CXX17STD)' CXXFLAGS='$(CXX17FLAGS)' CXXPICFLAGS='$(CXX17PICFLAGS)' SHLIB_LDFLAGS='$(SHLIB_CXX17LDFLAGS)' SHLIB_LD='$(SHLIB_CXX17LD)' SHLIB='file35a7d6a4c099c.so' OBJECTS='file35a7d6a4c099c.o'

make would use
g++ -std=gnu++17 -I"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/include" -DNDEBUG   -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/Rcpp/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppEigen/include/unsupported"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/BH/include" -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/src/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/include/"  -I"/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/include" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/java/17.0.6/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include -I/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Core/flexiblascore/3.3.1/include/flexiblas    -fpic  -O2 -ftree-vectorize -march=x86-64-v3 -fno-math-errno  -c file35a7d6a4c099c.cpp -o file35a7d6a4c099c.o
if test  "zfile35a7d6a4c099c.o" != "z"; then \
  echo g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file35a7d6a4c099c.so file35a7d6a4c099c.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
  g++ -std=gnu++17 -shared -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib"  -o file35a7d6a4c099c.so file35a7d6a4c099c.o  '/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/rstan/lib//libStanServices.a' -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/StanHeaders/lib/' -lStanHeaders -L'/home/melanson/R/x86_64-pc-linux-gnu-library/4.3/RcppParallel/lib/' -ltbb   -L"/cvmfs/soft.computecanada.ca/easybuild/software/2023/x86-64-v3/Compiler/gcccore/r/4.3.1/lib64/R/lib" -lR; \
fi

CHECKING DATA AND PREPROCESSING FOR MODEL 'anon_model' NOW.

COMPILING MODEL 'anon_model' NOW.

STARTING SAMPLER FOR MODEL 'anon_model' NOW.
[1] "Model complete."
[1] "Model saved."
Stan model 'anon_model' does not contain samples.
Stan model 'anon_model' does not contain samples.
Stan model 'anon_model' does not contain samples.
Stan model 'anon_model' does not contain samples.
Stan model 'anon_model' does not contain samples.
Stan model 'anon_model' does not contain samples.

Call:
lm(formula = mean_dist ~ center_landscape, data = doubleton_colonies)

Residuals:
    Min      1Q  Median      3Q     Max 
-27.142 -23.140   3.995  15.483 111.025 

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)        24.767      1.418  17.465   <2e-16 ***
center_landscape   -1.993      1.249  -1.595    0.111    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 25.26 on 466 degrees of freedom
Multiple R-squared:  0.005432,	Adjusted R-squared:  0.003298 
F-statistic: 2.545 on 1 and 466 DF,  p-value: 0.1113

[1] TRUE
